From 2a239d1a61ad0a9a0d59194cb9038b9d33a23a82 Mon Sep 17 00:00:00 2001
From: Jacob Vaverka <jacob.vaverka@juliahub.com>
Date: Sat, 19 Nov 2022 16:13:36 -0600
Subject: [PATCH 02/41] Create Quarto Book Project

---
 .gitignore     |    6 +-
 _quarto.yml    |   30 +
 cover.png      |  Bin 0 -> 51194 bytes
 index.aux      |   18 +
 index.log      | 1490 ++++++++++++++++++++++++++++++++++++++++++++++++
 index.pdf      |  Bin 0 -> 13960 bytes
 index.qmd      |   15 +
 index.tex      |  303 ++++++++++
 index.toc      |    0
 intro.ipynb    |   93 +++
 intro.qmd      |   43 ++
 optimize.qmd   | 1240 ++++++++++++++++++++++++++++++++++++++++
 references.bib |   19 +
 references.qmd |    4 +
 summary.qmd    |    3 +
 test.qmd       |   14 +
 16 files changed, 3277 insertions(+), 1 deletion(-)
 create mode 100644 _quarto.yml
 create mode 100644 cover.png
 create mode 100644 index.aux
 create mode 100644 index.log
 create mode 100644 index.pdf
 create mode 100644 index.qmd
 create mode 100644 index.tex
 create mode 100644 index.toc
 create mode 100644 intro.ipynb
 create mode 100644 intro.qmd
 create mode 100644 optimize.qmd
 create mode 100644 references.bib
 create mode 100644 references.qmd
 create mode 100644 summary.qmd
 create mode 100644 test.qmd

diff --git a/.gitignore b/.gitignore
index 8d344c9..b6e9f81 100644
--- a/.gitignore
+++ b/.gitignore
@@ -2,4 +2,8 @@ __site/
 .DS_Store
 node_modules/
 package-lock.json
-**/jl_*
\ No newline at end of file
+**/jl_*
+.jupyter_cache/
+.quarto/
+_book/
+code/
diff --git a/_quarto.yml b/_quarto.yml
new file mode 100644
index 0000000..de29662
--- /dev/null
+++ b/_quarto.yml
@@ -0,0 +1,30 @@
+project:
+  type: book
+
+book:
+  title: "QuartoTest"
+  author: "JuliaHub & MIT"
+  date: "11/17/202"
+  chapters:
+    - index.qmd
+    - part: "Parallel Computing"
+      chapters: 
+        - intro.qmd
+        - optimize.qmd
+  appendices: 
+      - references.qmd
+
+bibliography: references.bib
+
+format:
+  html:
+    theme:
+      light: default
+      dark: cyborg
+  pdf:
+    documentclass: scrreprt
+
+jupyter: julia-1.8
+
+execute:
+  cache: true
\ No newline at end of file
diff --git a/cover.png b/cover.png
new file mode 100644
index 0000000000000000000000000000000000000000..e1f5bc61d11049afe5b5dc2a67a3a32f406be964
GIT binary patch
literal 51194
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
Vyw!|9>LU1OnX%cT*addJ{|^#&e**vj

literal 0
HcmV?d00001

diff --git a/index.aux b/index.aux
new file mode 100644
index 0000000..13d3bfc
--- /dev/null
+++ b/index.aux
@@ -0,0 +1,18 @@
+\relax 
+\providecommand\hyper@newdestlabel[2]{}
+\providecommand*\new@tpo@label[2]{}
+\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
+\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
+\global\let\oldnewlabel\newlabel
+\gdef\newlabel#1#2{\newlabelxx{#1}#2}
+\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
+\AtEndDocument{\ifx\hyper@anchor\@undefined
+\let\newlabel\oldnewlabel
+\fi}
+\fi}
+\global\let\hyper@last\relax 
+\gdef\HyperFirstAtBeginDocument#1{#1}
+\providecommand*\HyPL@Entry[1]{}
+\HyPL@Entry{0<</S/D>>}
+\newlabel{preface}{{}{3}{}{chapter*.2}{}}
+\@writefile{toc}{\contentsline {chapter}{Preface}{3}{chapter*.2}\protected@file@percent }
diff --git a/index.log b/index.log
new file mode 100644
index 0000000..c4342c0
--- /dev/null
+++ b/index.log
@@ -0,0 +1,1490 @@
+This is XeTeX, Version 3.141592653-2.6-0.999994 (MiKTeX 22.3) (preloaded format=xelatex 2022.10.19)  17 NOV 2022 20:43
+entering extended mode
+ restricted \write18 enabled.
+ %&-line parsing enabled.
+**./index.tex
+(index.tex
+LaTeX2e <2022-06-01> patch level 3
+L3 programming layer <2022-06-16>
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/koma-script\scrreprt.cl
+s
+Document Class: scrreprt 2022/10/12 v3.38 KOMA-Script document class (report)
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/koma-script\scrkbase.st
+y
+Package: scrkbase 2022/10/12 v3.38 KOMA-Script package (KOMA-Script-dependent b
+asics and keyval usage)
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/koma-script\scrbase.sty
+Package: scrbase 2022/10/12 v3.38 KOMA-Script package (KOMA-Script-independent 
+basics and keyval usage)
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/koma-script\scrlfile.st
+y
+Package: scrlfile 2022/10/12 v3.38 KOMA-Script package (file load hooks)
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/koma-script\scrlfile-ho
+ok.sty
+Package: scrlfile-hook 2022/10/12 v3.38 KOMA-Script package (using LaTeX hooks)
+
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/koma-script\scrlogo.sty
+Package: scrlogo 2022/10/12 v3.38 KOMA-Script package (logo)
+))) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/graphics\keyval.sty
+Package: keyval 2022/05/29 v1.15 key=value parser (DPC)
+\KV@toks@=\toks16
+)
+Applying: [2021/05/01] Usage of raw or classic option list on input line 252.
+Already applied: [0000/00/00] Usage of raw or classic option list on input line
+ 368.
+))
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/koma-script\tocbasic.st
+y
+Package: tocbasic 2022/10/12 v3.38 KOMA-Script package (handling toc-files)
+\scr@dte@tocline@numberwidth=\skip47
+\scr@dte@tocline@numbox=\box51
+)
+Package tocbasic Info: omitting babel extension for `toc'
+(tocbasic)             because of feature `nobabel' available
+(tocbasic)             for `toc' on input line 137.
+Class scrreprt Info: File `scrsize11pt.clo' used instead of
+(scrreprt)           file `scrsize11.clo' to setup font sizes on input line 261
+4.
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/koma-script\scrsize11pt
+.clo
+File: scrsize11pt.clo 2022/10/12 v3.38 KOMA-Script font size class option (11pt
+)
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/koma-script\typearea.st
+y
+Package: typearea 2022/10/12 v3.38 KOMA-Script package (type area)
+\ta@bcor=\skip48
+\ta@div=\count181
+Package typearea Info: You've used standard option `letterpaper'.
+(typearea)             This is correct!
+(typearea)             Internally I'm using `paper=letter'.
+(typearea)             If you'd like to set the option with \KOMAoptions,
+(typearea)             you'd have to use `paper=letter' there
+(typearea)             instead of `letterpaper', too.
+\ta@hblk=\skip49
+\ta@vblk=\skip50
+\ta@temp=\skip51
+\footheight=\skip52
+Package typearea Info: These are the values describing the layout:
+(typearea)             DIV  = 11
+(typearea)             BCOR = 0.0pt
+(typearea)             \paperwidth      = 614.295pt
+(typearea)              \textwidth      = 446.76004pt
+(typearea)              DIV departure   = -14%
+(typearea)              \evensidemargin = 11.49748pt
+(typearea)              \oddsidemargin  = 11.49748pt
+(typearea)             \paperheight     = 794.96999pt
+(typearea)              \textheight     = 582.20026pt
+(typearea)              \topmargin      = -37.40001pt
+(typearea)              \headheight     = 17.0pt
+(typearea)              \headsep        = 20.40001pt
+(typearea)              \topskip        = 11.0pt
+(typearea)              \footskip       = 47.6pt
+(typearea)              \baselineskip   = 13.6pt
+(typearea)              on input line 1767.
+)
+\c@part=\count182
+\c@chapter=\count183
+\c@section=\count184
+\c@subsection=\count185
+\c@subsubsection=\count186
+\c@paragraph=\count187
+\c@subparagraph=\count188
+\scr@dte@chapter@maxnumwidth=\skip53
+Class scrreprt Info: using compatibility default `afterindent=bysign'
+(scrreprt)           for `\chapter on input line 5902.
+\scr@dte@section@maxnumwidth=\skip54
+Class scrreprt Info: using compatibility default `runin=bysign'
+(scrreprt)           for `\section on input line 5913.
+Class scrreprt Info: using compatibility default `afterindent=bysign'
+(scrreprt)           for `\section on input line 5913.
+\scr@dte@part@maxnumwidth=\skip55
+Class scrreprt Info: using compatibility default `afterindent=true'
+(scrreprt)           for `\part on input line 5922.
+\scr@dte@subsection@maxnumwidth=\skip56
+Class scrreprt Info: using compatibility default `runin=bysign'
+(scrreprt)           for `\subsection on input line 5932.
+Class scrreprt Info: using compatibility default `afterindent=bysign'
+(scrreprt)           for `\subsection on input line 5932.
+\scr@dte@subsubsection@maxnumwidth=\skip57
+Class scrreprt Info: using compatibility default `runin=bysign'
+(scrreprt)           for `\subsubsection on input line 5942.
+Class scrreprt Info: using compatibility default `afterindent=bysign'
+(scrreprt)           for `\subsubsection on input line 5942.
+\scr@dte@paragraph@maxnumwidth=\skip58
+Class scrreprt Info: using compatibility default `runin=bysign'
+(scrreprt)           for `\paragraph on input line 5953.
+Class scrreprt Info: using compatibility default `afterindent=bysign'
+(scrreprt)           for `\paragraph on input line 5953.
+\scr@dte@subparagraph@maxnumwidth=\skip59
+Class scrreprt Info: using compatibility default `runin=bysign'
+(scrreprt)           for `\subparagraph on input line 5963.
+Class scrreprt Info: using compatibility default `afterindent=bysign'
+(scrreprt)           for `\subparagraph on input line 5963.
+\abovecaptionskip=\skip60
+\belowcaptionskip=\skip61
+\c@pti@nb@sid@b@x=\box52
+Package tocbasic Info: omitting babel extension for `lof'
+(tocbasic)             because of feature `nobabel' available
+(tocbasic)             for `lof' on input line 7140.
+\scr@dte@figure@maxnumwidth=\skip62
+\c@figure=\count189
+Package tocbasic Info: omitting babel extension for `lot'
+(tocbasic)             because of feature `nobabel' available
+(tocbasic)             for `lot' on input line 7157.
+\scr@dte@table@maxnumwidth=\skip63
+\c@table=\count190
+Class scrreprt Info: Redefining `\numberline' on input line 7328.
+\bibindent=\dimen138
+) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/amsmath\amsmath.sty
+Package: amsmath 2022/04/08 v2.17n AMS math features
+\@mathmargin=\skip64
+For additional information on amsmath, use the `?' option.
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/amsmath\amstext.sty
+Package: amstext 2021/08/26 v2.01 AMS text
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/amsmath\amsgen.sty
+File: amsgen.sty 1999/11/30 v2.0 generic functions
+\@emptytoks=\toks17
+\ex@=\dimen139
+)) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/amsmath\amsbsy.sty
+Package: amsbsy 1999/11/29 v1.2d Bold Symbols
+\pmbraise@=\dimen140
+) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/amsmath\amsopn.sty
+Package: amsopn 2022/04/08 v2.04 operator names
+)
+\inf@bad=\count191
+LaTeX Info: Redefining \frac on input line 234.
+\uproot@=\count192
+\leftroot@=\count193
+LaTeX Info: Redefining \overline on input line 399.
+LaTeX Info: Redefining \colon on input line 410.
+\classnum@=\count194
+\DOTSCASE@=\count195
+LaTeX Info: Redefining \ldots on input line 496.
+LaTeX Info: Redefining \dots on input line 499.
+LaTeX Info: Redefining \cdots on input line 620.
+\Mathstrutbox@=\box53
+\strutbox@=\box54
+LaTeX Info: Redefining \big on input line 722.
+LaTeX Info: Redefining \Big on input line 723.
+LaTeX Info: Redefining \bigg on input line 724.
+LaTeX Info: Redefining \Bigg on input line 725.
+\big@size=\dimen141
+LaTeX Font Info:    Redeclaring font encoding OML on input line 743.
+LaTeX Font Info:    Redeclaring font encoding OMS on input line 744.
+\macc@depth=\count196
+LaTeX Info: Redefining \bmod on input line 905.
+LaTeX Info: Redefining \pmod on input line 910.
+LaTeX Info: Redefining \smash on input line 940.
+LaTeX Info: Redefining \relbar on input line 970.
+LaTeX Info: Redefining \Relbar on input line 971.
+\c@MaxMatrixCols=\count197
+\dotsspace@=\muskip16
+\c@parentequation=\count198
+\dspbrk@lvl=\count199
+\tag@help=\toks18
+\row@=\count266
+\column@=\count267
+\maxfields@=\count268
+\andhelp@=\toks19
+\eqnshift@=\dimen142
+\alignsep@=\dimen143
+\tagshift@=\dimen144
+\tagwidth@=\dimen145
+\totwidth@=\dimen146
+\lineht@=\dimen147
+\@envbody=\toks20
+\multlinegap=\skip65
+\multlinetaggap=\skip66
+\mathdisplay@stack=\toks21
+LaTeX Info: Redefining \[ on input line 2953.
+LaTeX Info: Redefining \] on input line 2954.
+) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/amsfonts\amssymb.sty
+Package: amssymb 2013/01/14 v3.01 AMS font symbols
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/amsfonts\amsfonts.sty
+Package: amsfonts 2013/01/14 v3.01 Basic AMSFonts support
+\symAMSa=\mathgroup4
+\symAMSb=\mathgroup5
+LaTeX Font Info:    Redeclaring math symbol \hbar on input line 98.
+LaTeX Font Info:    Overwriting math alphabet `\mathfrak' in version `bold'
+(Font)                  U/euf/m/n --> U/euf/b/n on input line 106.
+)) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/lm\lmodern.sty
+Package: lmodern 2015/05/01 v1.6.1 Latin Modern Fonts
+LaTeX Font Info:    Overwriting symbol font `operators' in version `normal'
+(Font)                  OT1/cmr/m/n --> OT1/lmr/m/n on input line 22.
+LaTeX Font Info:    Overwriting symbol font `letters' in version `normal'
+(Font)                  OML/cmm/m/it --> OML/lmm/m/it on input line 23.
+LaTeX Font Info:    Overwriting symbol font `symbols' in version `normal'
+(Font)                  OMS/cmsy/m/n --> OMS/lmsy/m/n on input line 24.
+LaTeX Font Info:    Overwriting symbol font `largesymbols' in version `normal'
+(Font)                  OMX/cmex/m/n --> OMX/lmex/m/n on input line 25.
+LaTeX Font Info:    Overwriting symbol font `operators' in version `bold'
+(Font)                  OT1/cmr/bx/n --> OT1/lmr/bx/n on input line 26.
+LaTeX Font Info:    Overwriting symbol font `letters' in version `bold'
+(Font)                  OML/cmm/b/it --> OML/lmm/b/it on input line 27.
+LaTeX Font Info:    Overwriting symbol font `symbols' in version `bold'
+(Font)                  OMS/cmsy/b/n --> OMS/lmsy/b/n on input line 28.
+LaTeX Font Info:    Overwriting symbol font `largesymbols' in version `bold'
+(Font)                  OMX/cmex/m/n --> OMX/lmex/m/n on input line 29.
+LaTeX Font Info:    Overwriting math alphabet `\mathbf' in version `normal'
+(Font)                  OT1/cmr/bx/n --> OT1/lmr/bx/n on input line 31.
+LaTeX Font Info:    Overwriting math alphabet `\mathsf' in version `normal'
+(Font)                  OT1/cmss/m/n --> OT1/lmss/m/n on input line 32.
+LaTeX Font Info:    Overwriting math alphabet `\mathit' in version `normal'
+(Font)                  OT1/cmr/m/it --> OT1/lmr/m/it on input line 33.
+LaTeX Font Info:    Overwriting math alphabet `\mathtt' in version `normal'
+(Font)                  OT1/cmtt/m/n --> OT1/lmtt/m/n on input line 34.
+LaTeX Font Info:    Overwriting math alphabet `\mathbf' in version `bold'
+(Font)                  OT1/cmr/bx/n --> OT1/lmr/bx/n on input line 35.
+LaTeX Font Info:    Overwriting math alphabet `\mathsf' in version `bold'
+(Font)                  OT1/cmss/bx/n --> OT1/lmss/bx/n on input line 36.
+LaTeX Font Info:    Overwriting math alphabet `\mathit' in version `bold'
+(Font)                  OT1/cmr/bx/it --> OT1/lmr/bx/it on input line 37.
+LaTeX Font Info:    Overwriting math alphabet `\mathtt' in version `bold'
+(Font)                  OT1/cmtt/m/n --> OT1/lmtt/m/n on input line 38.
+) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/iftex\iftex.sty
+Package: iftex 2022/02/03 v1.0f TeX engine tests
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/unicode-math\unicode-ma
+th.sty (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/l3kernel\expl3.s
+ty
+Package: expl3 2022-06-16 L3 programming layer (loader) 
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/l3backend\l3backend-xet
+ex.def
+File: l3backend-xetex.def 2022-04-20 L3 backend support: XeTeX
+\g__graphics_track_int=\count269
+\l__pdf_internal_box=\box55
+\g__pdf_backend_object_int=\count270
+\g__pdf_backend_annotation_int=\count271
+\g__pdf_backend_link_int=\count272
+))
+Package: unicode-math 2020/01/31 v0.8q Unicode maths in XeLaTeX and LuaLaTeX
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/unicode-math\unicode-ma
+th-xetex.sty
+Package: unicode-math-xetex 2020/01/31 v0.8q Unicode maths in XeLaTeX and LuaLa
+TeX
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/l3packages/xparse\xpars
+e.sty
+Package: xparse 2022-06-22 L3 Experimental document command parser
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/l3packages/l3keys2e\l3k
+eys2e.sty
+Package: l3keys2e 2022-06-22 LaTeX2e option processing using LaTeX3 keys
+) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/fontspec\fontspec.sty
+Package: fontspec 2022/01/15 v2.8a Font selection for XeLaTeX and LuaLaTeX
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/fontspec\fontspec-xetex
+.sty
+Package: fontspec-xetex 2022/01/15 v2.8a Font selection for XeLaTeX and LuaLaTe
+X
+\l__fontspec_script_int=\count273
+\l__fontspec_language_int=\count274
+\l__fontspec_strnum_int=\count275
+\l__fontspec_tmp_int=\count276
+\l__fontspec_tmpa_int=\count277
+\l__fontspec_tmpb_int=\count278
+\l__fontspec_tmpc_int=\count279
+\l__fontspec_em_int=\count280
+\l__fontspec_emdef_int=\count281
+\l__fontspec_strong_int=\count282
+\l__fontspec_strongdef_int=\count283
+\l__fontspec_tmpa_dim=\dimen148
+\l__fontspec_tmpb_dim=\dimen149
+\l__fontspec_tmpc_dim=\dimen150
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/base\fontenc.sty
+Package: fontenc 2021/04/29 v2.0v Standard LaTeX package
+) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/fontspec\fontspec.cfg
+))) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/base\fix-cm.sty
+Package: fix-cm 2020/11/24 v1.1t fixes to LaTeX
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/base\ts1enc.def
+File: ts1enc.def 2001/06/05 v3.0e (jk/car/fm) Standard LaTeX file
+LaTeX Font Info:    Redeclaring font encoding TS1 on input line 47.
+))
+\g__um_fam_int=\count284
+\g__um_fonts_used_int=\count285
+\l__um_primecount_int=\count286
+\g__um_primekern_muskip=\muskip17
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/unicode-math\unicode-ma
+th-table.tex))) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/upquote
+\upquote.sty
+Package: upquote 2012/04/19 v1.3 upright-quote and grave-accent glyphs in verba
+tim
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/base\textcomp.sty
+Package: textcomp 2020/02/02 v2.0n Standard LaTeX package
+))
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/microtype\microtype.sty
+Package: microtype 2022/06/23 v3.0f Micro-typographical refinements (RS)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/etoolbox\etoolbox.sty
+Package: etoolbox 2020/10/05 v2.5k e-TeX tools for LaTeX (JAW)
+\etb@tempcnta=\count287
+)
+\MT@toks=\toks22
+\MT@tempbox=\box56
+\MT@count=\count288
+LaTeX Info: Redefining \noprotrusionifhmode on input line 1045.
+LaTeX Info: Redefining \leftprotrusion on input line 1046.
+LaTeX Info: Redefining \rightprotrusion on input line 1056.
+LaTeX Info: Redefining \textls on input line 1234.
+\MT@outer@kern=\dimen151
+LaTeX Info: Redefining \textmicrotypecontext on input line 1858.
+\MT@listname@count=\count289
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/microtype\microtype-xet
+ex.def
+File: microtype-xetex.def 2022/06/23 v3.0f Definitions specific to xetex (RS)
+LaTeX Info: Redefining \lsstyle on input line 236.
+)
+Package microtype Info: Loading configuration file microtype.cfg.
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/microtype\microtype.cfg
+File: microtype.cfg 2022/06/23 v3.0f microtype main configuration file (RS)
+)) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/xcolor\xcolor.sty
+Package: xcolor 2022/06/12 v2.14 LaTeX color extensions (UK)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/graphics-cfg\color.cfg
+File: color.cfg 2016/01/02 v1.6 sample color configuration
+)
+Package xcolor Info: Driver file: xetex.def on input line 227.
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/graphics-def\xetex.def
+File: xetex.def 2022/04/16 v5.0m Graphics/color driver for xetex
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex-dev/graphics\mathcolor.
+ltx)
+Package xcolor Info: Model `cmy' substituted by `cmy0' on input line 1353.
+Package xcolor Info: Model `RGB' extended on input line 1369.
+Package xcolor Info: Model `HTML' substituted by `rgb' on input line 1371.
+Package xcolor Info: Model `Hsb' substituted by `hsb' on input line 1372.
+Package xcolor Info: Model `tHsb' substituted by `hsb' on input line 1373.
+Package xcolor Info: Model `HSB' substituted by `hsb' on input line 1374.
+Package xcolor Info: Model `Gray' substituted by `gray' on input line 1375.
+Package xcolor Info: Model `wave' substituted by `hsb' on input line 1376.
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/graphics\dvipsnam.def
+File: dvipsnam.def 2016/06/17 v3.0m Driver-dependent file (DPC,SPQR)
+) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/xcolor\svgnam.def
+File: svgnam.def 2022/06/12 v2.14 Predefined colors according to SVG 1.1 (UK)
+) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/xcolor\x11nam.def
+File: x11nam.def 2022/06/12 v2.14 Predefined colors according to Unix/X11 (UK)
+)) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/tools\longtable.sty
+Package: longtable 2021-09-01 v4.17 Multi-page Table package (DPC)
+\LTleft=\skip67
+\LTright=\skip68
+\LTpre=\skip69
+\LTpost=\skip70
+\LTchunksize=\count290
+\LTcapwidth=\dimen152
+\LT@head=\box57
+\LT@firsthead=\box58
+\LT@foot=\box59
+\LT@lastfoot=\box60
+\LT@gbox=\box61
+\LT@cols=\count291
+\LT@rows=\count292
+\c@LT@tables=\count293
+\c@LT@chunks=\count294
+\LT@p@ftn=\toks23
+)
+Class scrreprt Info: longtable captions redefined on input line 55.
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/booktabs\booktabs.sty
+Package: booktabs 2020/01/12 v1.61803398 Publication quality tables
+\heavyrulewidth=\dimen153
+\lightrulewidth=\dimen154
+\cmidrulewidth=\dimen155
+\belowrulesep=\dimen156
+\belowbottomsep=\dimen157
+\aboverulesep=\dimen158
+\abovetopsep=\dimen159
+\cmidrulesep=\dimen160
+\cmidrulekern=\dimen161
+\defaultaddspace=\dimen162
+\@cmidla=\count295
+\@cmidlb=\count296
+\@aboverulesep=\dimen163
+\@belowrulesep=\dimen164
+\@thisruleclass=\count297
+\@lastruleclass=\count298
+\@thisrulewidth=\dimen165
+) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/tools\array.sty
+Package: array 2021/10/04 v2.5f Tabular extension package (FMi)
+\col@sep=\dimen166
+\ar@mcellbox=\box62
+\extrarowheight=\dimen167
+\NC@list=\toks24
+\extratabsurround=\skip71
+\backup@length=\skip72
+\ar@cellbox=\box63
+) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/tools\calc.sty
+Package: calc 2017/05/25 v4.3 Infix arithmetic (KKT,FJ)
+\calc@Acount=\count299
+\calc@Bcount=\count300
+\calc@Adimen=\dimen168
+\calc@Bdimen=\dimen169
+\calc@Askip=\skip73
+\calc@Bskip=\skip74
+LaTeX Info: Redefining \setlength on input line 80.
+LaTeX Info: Redefining \addtolength on input line 81.
+\calc@Ccount=\count301
+\calc@Cskip=\skip75
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/footnotehyper\footnoteh
+yper.sty
+Package: footnotehyper 2021/08/13 v1.1e hyperref aware footnote.sty (JFB)
+\FNH@notes=\box64
+\FNH@width=\dimen170
+\FNH@toks=\toks25
+) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/graphics\graphicx.sty
+Package: graphicx 2021/09/16 v1.2d Enhanced LaTeX Graphics (DPC,SPQR)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/graphics\graphics.sty
+Package: graphics 2022/03/10 v1.4e Standard LaTeX Graphics (DPC,SPQR)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/graphics\trig.sty
+Package: trig 2021/08/11 v1.11 sin cos tan (DPC)
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/graphics-cfg\graphics.c
+fg
+File: graphics.cfg 2016/06/04 v1.11 sample graphics configuration
+)
+Package graphics Info: Driver file: xetex.def on input line 107.
+)
+\Gin@req@height=\dimen171
+\Gin@req@width=\dimen172
+)
+\cslhangindent=\skip76
+\csllabelwidth=\skip77
+\cslentryspacingunit=\skip78
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/tcolorbox\tcolorbox.sty
+Package: tcolorbox 2022/06/24 version 5.1.1 text color boxes
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/pgf/basiclayer\pgf.sty
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/pgf/utilities\pgfrcs.st
+y
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/utilities\pgfutil
+-common.tex
+\pgfutil@everybye=\toks26
+\pgfutil@tempdima=\dimen173
+\pgfutil@tempdimb=\dimen174
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/utilities\pgfutil
+-common-lists.tex))
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/utilities\pgfutil
+-latex.def
+\pgfutil@abb=\box65
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/utilities\pgfrcs.
+code.tex (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf\pgf.revi
+sion.tex)
+Package: pgfrcs 2021/05/15 v3.1.9a (3.1.9a)
+))
+Package: pgf 2021/05/15 v3.1.9a (3.1.9a)
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/pgf/basiclayer\pgfcore.
+sty
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/pgf/systemlayer\pgfsys.
+sty
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/systemlayer\pgfsy
+s.code.tex
+Package: pgfsys 2021/05/15 v3.1.9a (3.1.9a)
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/utilities\pgfkeys
+.code.tex
+\pgfkeys@pathtoks=\toks27
+\pgfkeys@temptoks=\toks28
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/utilities\pgfkeys
+filtered.code.tex
+\pgfkeys@tmptoks=\toks29
+))
+\pgf@x=\dimen175
+\pgf@y=\dimen176
+\pgf@xa=\dimen177
+\pgf@ya=\dimen178
+\pgf@xb=\dimen179
+\pgf@yb=\dimen180
+\pgf@xc=\dimen181
+\pgf@yc=\dimen182
+\pgf@xd=\dimen183
+\pgf@yd=\dimen184
+\w@pgf@writea=\write3
+\r@pgf@reada=\read2
+\c@pgf@counta=\count302
+\c@pgf@countb=\count303
+\c@pgf@countc=\count304
+\c@pgf@countd=\count305
+\t@pgf@toka=\toks30
+\t@pgf@tokb=\toks31
+\t@pgf@tokc=\toks32
+\pgf@sys@id@count=\count306
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/systemlayer\pgf.c
+fg
+File: pgf.cfg 2021/05/15 v3.1.9a (3.1.9a)
+)
+Driver file for pgf: pgfsys-xetex.def
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/systemlayer\pgfsy
+s-xetex.def
+File: pgfsys-xetex.def 2021/05/15 v3.1.9a (3.1.9a)
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/systemlayer\pgfsy
+s-dvipdfmx.def
+File: pgfsys-dvipdfmx.def 2021/05/15 v3.1.9a (3.1.9a)
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/systemlayer\pgfsy
+s-common-pdf.def
+File: pgfsys-common-pdf.def 2021/05/15 v3.1.9a (3.1.9a)
+)
+\pgfsys@objnum=\count307
+)))
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/systemlayer\pgfsy
+ssoftpath.code.tex
+File: pgfsyssoftpath.code.tex 2021/05/15 v3.1.9a (3.1.9a)
+\pgfsyssoftpath@smallbuffer@items=\count308
+\pgfsyssoftpath@bigbuffer@items=\count309
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/systemlayer\pgfsy
+sprotocol.code.tex
+File: pgfsysprotocol.code.tex 2021/05/15 v3.1.9a (3.1.9a)
+))
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/basiclayer\pgfcor
+e.code.tex
+Package: pgfcore 2021/05/15 v3.1.9a (3.1.9a)
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/math\pgfmath.code
+.tex
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/math\pgfmathcalc.
+code.tex
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/math\pgfmathutil.
+code.tex)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/math\pgfmathparse
+r.code.tex
+\pgfmath@dimen=\dimen185
+\pgfmath@count=\count310
+\pgfmath@box=\box66
+\pgfmath@toks=\toks33
+\pgfmath@stack@operand=\toks34
+\pgfmath@stack@operation=\toks35
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/math\pgfmathfunct
+ions.code.tex
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/math\pgfmathfunct
+ions.basic.code.tex)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/math\pgfmathfunct
+ions.trigonometric.code.tex)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/math\pgfmathfunct
+ions.random.code.tex)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/math\pgfmathfunct
+ions.comparison.code.tex)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/math\pgfmathfunct
+ions.base.code.tex)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/math\pgfmathfunct
+ions.round.code.tex)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/math\pgfmathfunct
+ions.misc.code.tex)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/math\pgfmathfunct
+ions.integerarithmetics.code.tex)))
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/math\pgfmathfloat
+.code.tex
+\c@pgfmathroundto@lastzeros=\count311
+))
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/math\pgfint.code.
+tex)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/basiclayer\pgfcor
+epoints.code.tex
+File: pgfcorepoints.code.tex 2021/05/15 v3.1.9a (3.1.9a)
+\pgf@picminx=\dimen186
+\pgf@picmaxx=\dimen187
+\pgf@picminy=\dimen188
+\pgf@picmaxy=\dimen189
+\pgf@pathminx=\dimen190
+\pgf@pathmaxx=\dimen191
+\pgf@pathminy=\dimen192
+\pgf@pathmaxy=\dimen193
+\pgf@xx=\dimen194
+\pgf@xy=\dimen195
+\pgf@yx=\dimen196
+\pgf@yy=\dimen197
+\pgf@zx=\dimen198
+\pgf@zy=\dimen199
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/basiclayer\pgfcor
+epathconstruct.code.tex
+File: pgfcorepathconstruct.code.tex 2021/05/15 v3.1.9a (3.1.9a)
+\pgf@path@lastx=\dimen256
+\pgf@path@lasty=\dimen257
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/basiclayer\pgfcor
+epathusage.code.tex
+File: pgfcorepathusage.code.tex 2021/05/15 v3.1.9a (3.1.9a)
+\pgf@shorten@end@additional=\dimen258
+\pgf@shorten@start@additional=\dimen259
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/basiclayer\pgfcor
+escopes.code.tex
+File: pgfcorescopes.code.tex 2021/05/15 v3.1.9a (3.1.9a)
+\pgfpic=\box67
+\pgf@hbox=\box68
+\pgf@layerbox@main=\box69
+\pgf@picture@serial@count=\count312
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/basiclayer\pgfcor
+egraphicstate.code.tex
+File: pgfcoregraphicstate.code.tex 2021/05/15 v3.1.9a (3.1.9a)
+\pgflinewidth=\dimen260
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/basiclayer\pgfcor
+etransformations.code.tex
+File: pgfcoretransformations.code.tex 2021/05/15 v3.1.9a (3.1.9a)
+\pgf@pt@x=\dimen261
+\pgf@pt@y=\dimen262
+\pgf@pt@temp=\dimen263
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/basiclayer\pgfcor
+equick.code.tex
+File: pgfcorequick.code.tex 2021/05/15 v3.1.9a (3.1.9a)
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/basiclayer\pgfcor
+eobjects.code.tex
+File: pgfcoreobjects.code.tex 2021/05/15 v3.1.9a (3.1.9a)
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/basiclayer\pgfcor
+epathprocessing.code.tex
+File: pgfcorepathprocessing.code.tex 2021/05/15 v3.1.9a (3.1.9a)
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/basiclayer\pgfcor
+earrows.code.tex
+File: pgfcorearrows.code.tex 2021/05/15 v3.1.9a (3.1.9a)
+\pgfarrowsep=\dimen264
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/basiclayer\pgfcor
+eshade.code.tex
+File: pgfcoreshade.code.tex 2021/05/15 v3.1.9a (3.1.9a)
+\pgf@max=\dimen265
+\pgf@sys@shading@range@num=\count313
+\pgf@shadingcount=\count314
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/basiclayer\pgfcor
+eimage.code.tex
+File: pgfcoreimage.code.tex 2021/05/15 v3.1.9a (3.1.9a)
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/basiclayer\pgfcor
+eexternal.code.tex
+File: pgfcoreexternal.code.tex 2021/05/15 v3.1.9a (3.1.9a)
+\pgfexternal@startupbox=\box70
+))
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/basiclayer\pgfcor
+elayers.code.tex
+File: pgfcorelayers.code.tex 2021/05/15 v3.1.9a (3.1.9a)
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/basiclayer\pgfcor
+etransparency.code.tex
+File: pgfcoretransparency.code.tex 2021/05/15 v3.1.9a (3.1.9a)
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/basiclayer\pgfcor
+epatterns.code.tex
+File: pgfcorepatterns.code.tex 2021/05/15 v3.1.9a (3.1.9a)
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/basiclayer\pgfcor
+erdf.code.tex
+File: pgfcorerdf.code.tex 2021/05/15 v3.1.9a (3.1.9a)
+)))
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/modules\pgfmodule
+shapes.code.tex
+File: pgfmoduleshapes.code.tex 2021/05/15 v3.1.9a (3.1.9a)
+\pgfnodeparttextbox=\box71
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/modules\pgfmodule
+plot.code.tex
+File: pgfmoduleplot.code.tex 2021/05/15 v3.1.9a (3.1.9a)
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/pgf/compatibility\pgfco
+mp-version-0-65.sty
+Package: pgfcomp-version-0-65 2021/05/15 v3.1.9a (3.1.9a)
+\pgf@nodesepstart=\dimen266
+\pgf@nodesepend=\dimen267
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/pgf/compatibility\pgfco
+mp-version-1-18.sty
+Package: pgfcomp-version-1-18 2021/05/15 v3.1.9a (3.1.9a)
+)) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/tools\verbatim.sty
+Package: verbatim 2020-07-07 v1.5u LaTeX2e package for verbatim enhancements
+\every@verbatim=\toks36
+\verbatim@line=\toks37
+\verbatim@in@stream=\read3
+) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/environ\environ.sty
+Package: environ 2014/05/04 v0.3 A new way to define environments
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/trimspaces\trimspaces.s
+ty
+Package: trimspaces 2009/09/17 v1.1 Trim spaces around a token list
+))
+\tcb@titlebox=\box72
+\tcb@upperbox=\box73
+\tcb@lowerbox=\box74
+\tcb@phantombox=\box75
+\c@tcbbreakpart=\count315
+\c@tcblayer=\count316
+\c@tcolorbox@number=\count317
+\tcb@temp=\box76
+\tcb@temp=\box77
+\tcb@temp=\box78
+\tcb@temp=\box79
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/tcolorbox\tcbraster.cod
+e.tex
+Library (tcolorbox): 'tcbraster.code.tex' version '5.1.1'
+\c@tcbrastercolumn=\count318
+\c@tcbrasterrow=\count319
+\c@tcbrasternum=\count320
+\c@tcbraster=\count321
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/tcolorbox\tcbskins.code
+.tex
+Library (tcolorbox): 'tcbskins.code.tex' version '5.1.1'
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/pgf/frontendlayer\tikz.
+sty
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/pgf/utilities\pgffor.st
+y
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/pgf/utilities\pgfkeys.s
+ty
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/utilities\pgfkeys
+.code.tex)) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/pgf/math\pg
+fmath.sty
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/math\pgfmath.code
+.tex))
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/utilities\pgffor.
+code.tex
+Package: pgffor 2021/05/15 v3.1.9a (3.1.9a)
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/math\pgfmath.code
+.tex)
+\pgffor@iter=\dimen268
+\pgffor@skip=\dimen269
+\pgffor@stack=\toks38
+\pgffor@toks=\toks39
+))
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/frontendlayer/tik
+z\tikz.code.tex
+Package: tikz 2021/05/15 v3.1.9a (3.1.9a)
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/libraries\pgflibr
+aryplothandlers.code.tex
+File: pgflibraryplothandlers.code.tex 2021/05/15 v3.1.9a (3.1.9a)
+\pgf@plot@mark@count=\count322
+\pgfplotmarksize=\dimen270
+)
+\tikz@lastx=\dimen271
+\tikz@lasty=\dimen272
+\tikz@lastxsaved=\dimen273
+\tikz@lastysaved=\dimen274
+\tikz@lastmovetox=\dimen275
+\tikz@lastmovetoy=\dimen276
+\tikzleveldistance=\dimen277
+\tikzsiblingdistance=\dimen278
+\tikz@figbox=\box80
+\tikz@figbox@bg=\box81
+\tikz@tempbox=\box82
+\tikz@tempbox@bg=\box83
+\tikztreelevel=\count323
+\tikznumberofchildren=\count324
+\tikznumberofcurrentchild=\count325
+\tikz@fig@count=\count326
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/modules\pgfmodule
+matrix.code.tex
+File: pgfmodulematrix.code.tex 2021/05/15 v3.1.9a (3.1.9a)
+\pgfmatrixcurrentrow=\count327
+\pgfmatrixcurrentcolumn=\count328
+\pgf@matrix@numberofcolumns=\count329
+)
+\tikz@expandcount=\count330
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pgf/frontendlayer/tik
+z/libraries\tikzlibrarytopaths.code.tex
+File: tikzlibrarytopaths.code.tex 2021/05/15 v3.1.9a (3.1.9a)
+)))
+\tcb@waterbox=\box84
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/tcolorbox\tcbskinsjigsa
+w.code.tex
+Library (tcolorbox): 'tcbskinsjigsaw.code.tex' version '5.1.1'
+))
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/tcolorbox\tcbbreakable.
+code.tex
+Library (tcolorbox): 'tcbbreakable.code.tex' version '5.1.1'
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/oberdiek\pdfcol.sty
+Package: pdfcol 2019/12/29 v1.6 Handle new color stacks for pdfTeX (HO)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/ltxcmds\ltxcmds.sty
+Package: ltxcmds 2020-05-10 v1.25 LaTeX kernel commands for general use (HO)
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/infwarerr\infwarerr.s
+ty
+Package: infwarerr 2019/12/03 v1.5 Providing info/warning/error messages (HO)
+)
+Package pdfcol Info: Interface disabled because of missing PDF mode of pdfTeX.
+)
+Package pdfcol Info: pdfTeX's color stacks are not available.
+\tcb@testbox=\box85
+\tcb@totalupperbox=\box86
+\tcb@totallowerbox=\box87
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/tcolorbox\tcbhooks.code
+.tex
+Library (tcolorbox): 'tcbhooks.code.tex' version '5.1.1'
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/tcolorbox\tcbtheorems.c
+ode.tex
+Library (tcolorbox): 'tcbtheorems.code.tex' version '5.1.1'
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/tcolorbox\tcbfitting.co
+de.tex
+Library (tcolorbox): 'tcbfitting.code.tex' version '5.1.1'
+\tcbfitdim=\dimen279
+\tcb@lowerfitdim=\dimen280
+\tcb@upperfitdim=\dimen281
+\tcb@cur@hbadness=\count331
+))
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/fontawesome5\fontawesom
+e5.sty
+Package: fontawesome5 2022/05/02 v5.15.4 Font Awesome 5
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/fontawesome5\fontawesom
+e5-utex-helper.sty
+Package: fontawesome5-utex-helper 2022/05/02 v5.15.4 uTeX helper for fontawesom
+e5
+LaTeX Font Info:    Trying to load font information for TU+fontawesomefree on i
+nput line 69.
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/fontawesome5\tufontawes
+omefree.fd)
+LaTeX Font Info:    Trying to load font information for TU+fontawesomebrands on
+ input line 70.
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/fontawesome5\tufontawes
+omebrands.fd))) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/bookmar
+k\bookmark.sty
+Package: bookmark 2020-11-06 v1.29 PDF bookmarks (HO)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/hyperref\hyperref.sty
+Package: hyperref 2022-06-20 v7.00s Hypertext links for LaTeX
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pdftexcmds\pdftexcmds
+.sty
+Package: pdftexcmds 2020-06-27 v0.33 Utility functions of pdfTeX for LuaTeX (HO
+)
+Package pdftexcmds Info: \pdf@primitive is available.
+Package pdftexcmds Info: \pdf@ifprimitive is available.
+Package pdftexcmds Info: \pdfdraftmode not found.
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/kvsetkeys\kvsetkeys.s
+ty
+Package: kvsetkeys 2019/12/15 v1.18 Key value parser (HO)
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/kvdefinekeys\kvdefine
+keys.sty
+Package: kvdefinekeys 2019-12-19 v1.6 Define keys (HO)
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/pdfescape\pdfescape.s
+ty
+Package: pdfescape 2019/12/09 v1.15 Implements pdfTeX's escape features (HO)
+) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/hycolor\hycolor.sty
+Package: hycolor 2020-01-27 v1.10 Color options for hyperref/bookmark (HO)
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/letltxmacro\letltxmacro
+.sty
+Package: letltxmacro 2019/12/03 v1.6 Let assignment for LaTeX macros (HO)
+) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/auxhook\auxhook.sty
+Package: auxhook 2019-12-17 v1.6 Hooks for auxiliary files (HO)
+) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/hyperref\nameref.sty
+Package: nameref 2022-05-17 v2.50 Cross-referencing by name of section
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/refcount\refcount.sty
+Package: refcount 2019/12/15 v3.6 Data extraction from label references (HO)
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/gettitlestring\gettit
+lestring.sty
+Package: gettitlestring 2019/12/15 v1.6 Cleanup title references (HO)
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/kvoptions\kvoptions.sty
+Package: kvoptions 2022-06-15 v3.15 Key value format for package options (HO)
+))
+\c@section@level=\count332
+)
+\@linkdim=\dimen282
+\Hy@linkcounter=\count333
+\Hy@pagecounter=\count334
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/hyperref\pd1enc.def
+File: pd1enc.def 2022-06-20 v7.00s Hyperref: PDFDocEncoding definition (HO)
+) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/intcalc\intcalc.sty
+Package: intcalc 2019/12/15 v1.3 Expandable calculations with integers (HO)
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/etexcmds\etexcmds.sty
+Package: etexcmds 2019/12/15 v1.7 Avoid name clashes with e-TeX commands (HO)
+)
+\Hy@SavedSpaceFactor=\count335
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/hyperref\puenc.def
+File: puenc.def 2022-06-20 v7.00s Hyperref: PDF Unicode definition (HO)
+)
+Package hyperref Info: Option `unicode' set `true' on input line 4045.
+Package hyperref Info: Hyper figures OFF on input line 4162.
+Package hyperref Info: Link nesting OFF on input line 4167.
+Package hyperref Info: Hyper index ON on input line 4170.
+Package hyperref Info: Plain pages OFF on input line 4177.
+Package hyperref Info: Backreferencing OFF on input line 4182.
+Package hyperref Info: Implicit mode ON; LaTeX internals redefined.
+Package hyperref Info: Bookmarks ON on input line 4408.
+\c@Hy@tempcnt=\count336
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/url\url.sty
+\Urlmuskip=\muskip18
+Package: url 2013/09/16  ver 3.4  Verb mode for urls, etc.
+)
+LaTeX Info: Redefining \url on input line 4746.
+\XeTeXLinkMargin=\dimen283
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/bitset\bitset.sty
+Package: bitset 2019/12/09 v1.3 Handle bit-vector datatype (HO)
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/bigintcalc\bigintcalc
+.sty
+Package: bigintcalc 2019/12/15 v1.5 Expandable calculations on big integers (HO
+)
+))
+\Fld@menulength=\count337
+\Field@Width=\dimen284
+\Fld@charsize=\dimen285
+Package hyperref Info: Hyper figures OFF on input line 6024.
+Package hyperref Info: Link nesting OFF on input line 6029.
+Package hyperref Info: Hyper index ON on input line 6032.
+Package hyperref Info: backreferencing OFF on input line 6039.
+Package hyperref Info: Link coloring OFF on input line 6044.
+Package hyperref Info: Link coloring with OCG OFF on input line 6049.
+Package hyperref Info: PDF/A mode OFF on input line 6054.
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/base\atbegshi-ltx.sty
+Package: atbegshi-ltx 2021/01/10 v1.0c Emulation of the original atbegshi
+package with kernel methods
+)
+\Hy@abspage=\count338
+\c@Item=\count339
+\c@Hfootnote=\count340
+)
+Package hyperref Info: Driver (autodetected): hxetex.
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/hyperref\hxetex.def
+File: hxetex.def 2022-06-20 v7.00s Hyperref driver for XeTeX
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/stringenc\stringenc.s
+ty
+Package: stringenc 2019/11/29 v1.12 Convert strings between diff. encodings (HO
+)
+)
+\pdfm@box=\box88
+\c@Hy@AnnotLevel=\count341
+\HyField@AnnotCount=\count342
+\Fld@listcount=\count343
+\c@bookmark@seq@number=\count344
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/rerunfilecheck\rerunfil
+echeck.sty
+Package: rerunfilecheck 2019/12/05 v1.9 Rerun checks for auxiliary files (HO)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/base\atveryend-ltx.sty
+Package: atveryend-ltx 2020/08/19 v1.0a Emulation of the original atveryend pac
+kage
+with kernel methods
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/generic/uniquecounter\uniquec
+ounter.sty
+Package: uniquecounter 2019/12/15 v1.4 Provide unlimited unique counter (HO)
+)
+Package uniquecounter Info: New unique counter `rerunfilecheck' on input line 2
+86.
+)
+\Hy@SectionHShift=\skip79
+)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/bookmark\bkm-dvipdfm.de
+f
+File: bkm-dvipdfm.def 2020-11-06 v1.29 bookmark driver for dvipdfm (HO)
+\BKM@id=\count345
+)) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/caption\caption.sty
+Package: caption 2022/03/01 v3.6b Customizing captions (AR)
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/caption\caption3.sty
+Package: caption3 2022/03/17 v2.3b caption3 kernel (AR)
+\caption@tempdima=\dimen286
+\captionmargin=\dimen287
+\caption@leftmargin=\dimen288
+\caption@rightmargin=\dimen289
+\caption@width=\dimen290
+\caption@indent=\dimen291
+\caption@parindent=\dimen292
+\caption@hangindent=\dimen293
+Package caption Info: KOMA-Script document class detected.
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/caption\caption-koma.st
+o
+File: caption-koma.sto 2020/09/21 v2.0b Adaption of the caption package to the 
+KOMA-Script document classes (AR)
+))
+\c@caption@flags=\count346
+\c@continuedfloat=\count347
+Package caption Info: hyperref package is loaded.
+Package caption Info: longtable package is loaded.
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/caption\ltcaption.sty
+Package: ltcaption 2021/01/08 v1.4c longtable captions (AR)
+)) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/float\float.sty
+Package: float 2001/11/08 v1.3d Float enhancements (AL)
+\c@float@type=\count348
+\float@exts=\toks40
+\float@box=\box89
+\@float@everytoks=\toks41
+\@floatcapt=\box90
+)
+\@float@every@codelisting=\toks42
+\c@codelisting=\count349
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/caption\subcaption.sty
+Package: subcaption 2022/01/07 v1.5 Sub-captions (AR)
+\c@subfigure=\count350
+\c@subtable=\count351
+) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/xurl\xurl.sty
+Package: xurl 2022/01/09 v 0.10 modify URL breaks
+)
+Package hyperref Info: Option `colorlinks' set `true' on input line 184.
+No file index.aux.
+\openout1 = `index.aux'.
+
+LaTeX Font Info:    Checking defaults for OML/cmm/m/it on input line 190.
+LaTeX Font Info:    ... okay on input line 190.
+LaTeX Font Info:    Checking defaults for OMS/cmsy/m/n on input line 190.
+LaTeX Font Info:    ... okay on input line 190.
+LaTeX Font Info:    Checking defaults for OT1/cmr/m/n on input line 190.
+LaTeX Font Info:    ... okay on input line 190.
+LaTeX Font Info:    Checking defaults for T1/cmr/m/n on input line 190.
+LaTeX Font Info:    ... okay on input line 190.
+LaTeX Font Info:    Checking defaults for TS1/cmr/m/n on input line 190.
+LaTeX Font Info:    ... okay on input line 190.
+LaTeX Font Info:    Checking defaults for TU/lmr/m/n on input line 190.
+LaTeX Font Info:    ... okay on input line 190.
+LaTeX Font Info:    Checking defaults for OMX/cmex/m/n on input line 190.
+LaTeX Font Info:    ... okay on input line 190.
+LaTeX Font Info:    Checking defaults for U/cmr/m/n on input line 190.
+LaTeX Font Info:    ... okay on input line 190.
+LaTeX Font Info:    Checking defaults for PD1/pdf/m/n on input line 190.
+LaTeX Font Info:    ... okay on input line 190.
+LaTeX Font Info:    Checking defaults for PU/pdf/m/n on input line 190.
+LaTeX Font Info:    ... okay on input line 190.
+Package scrbase Info: activating english \abstractname on input line 190.
+Package scrbase Info: activating english \partname on input line 190.
+Package scrbase Info: activating english \chaptername on input line 190.
+Package scrbase Info: activating english \appendixname on input line 190.
+Package scrbase Info: activating english \figurename on input line 190.
+Package scrbase Info: activating english \tablename on input line 190.
+Package scrbase Info: activating english \contentsname on input line 190.
+Package scrbase Info: activating english \listfigurename on input line 190.
+Package scrbase Info: activating english \listtablename on input line 190.
+Package scrbase Info: activating english \bibname on input line 190.
+Package scrbase Info: activating english \indexname on input line 190.
+LaTeX Font Info:    Overwriting math alphabet `\mathrm' in version `normal'
+(Font)                  OT1/lmr/m/n --> TU/lmr/m/n on input line 190.
+LaTeX Font Info:    Overwriting math alphabet `\mathit' in version `normal'
+(Font)                  OT1/lmr/m/it --> TU/lmr/m/it on input line 190.
+LaTeX Font Info:    Overwriting math alphabet `\mathbf' in version `normal'
+(Font)                  OT1/lmr/bx/n --> TU/lmr/bx/n on input line 190.
+LaTeX Font Info:    Overwriting math alphabet `\mathsf' in version `normal'
+(Font)                  OT1/lmss/m/n --> TU/lmss/m/n on input line 190.
+LaTeX Font Info:    Overwriting math alphabet `\mathsf' in version `bold'
+(Font)                  OT1/lmss/bx/n --> TU/lmss/bx/n on input line 190.
+LaTeX Font Info:    Overwriting math alphabet `\mathtt' in version `normal'
+(Font)                  OT1/lmtt/m/n --> TU/lmtt/m/n on input line 190.
+LaTeX Font Info:    Overwriting math alphabet `\mathtt' in version `bold'
+(Font)                  OT1/lmtt/m/n --> TU/lmtt/bx/n on input line 190.
+
+Package fontspec Info: latinmodern-math scale = 0.9999967668407183.
+
+
+Package fontspec Info: latinmodern-math scale = 0.9999967668407183.
+
+
+Package fontspec Info: latinmodern-math scale = 0.9999967668407183.
+
+
+Package fontspec Info: Font family 'latinmodern-math.otf(0)' created for font
+(fontspec)             'latinmodern-math.otf' with options
+(fontspec)             [Scale=MatchLowercase,BoldItalicFont={},ItalicFont={},Sm
+allCapsFont={},Script=Math,BoldFont={latinmodern-math.otf}].
+(fontspec)              
+(fontspec)              This font family consists of the following NFSS
+(fontspec)             series/shapes:
+(fontspec)              
+(fontspec)             - 'normal' (m/n) with NFSS spec.:
+(fontspec)             <->s*[0.9999967668407183]"[latinmodern-math.otf]/OT:scri
+pt=math;language=dflt;"
+(fontspec)             - 'small caps'  (m/sc) with NFSS spec.: 
+(fontspec)             - 'bold' (b/n) with NFSS spec.:
+(fontspec)             <->s*[0.9999967668407183]"[latinmodern-math.otf]/OT:scri
+pt=math;language=dflt;"
+(fontspec)             - 'bold small caps'  (b/sc) with NFSS spec.: 
+
+LaTeX Font Info:    Font shape `TU/latinmodern-math.otf(0)/m/n' will be
+(Font)              scaled to size 10.95pt on input line 190.
+
+Package fontspec Info: latinmodern-math scale = 0.9999967668407183.
+
+
+Package fontspec Info: latinmodern-math scale = 0.9999967668407183.
+
+
+Package fontspec Info: latinmodern-math scale = 0.9999967668407183.
+
+
+Package fontspec Info: latinmodern-math scale = 0.9999967668407183.
+
+
+Package fontspec Info: latinmodern-math scale = 0.9999967668407183.
+
+
+Package fontspec Info: Font family 'latinmodern-math.otf(1)' created for font
+(fontspec)             'latinmodern-math.otf' with options
+(fontspec)             [Scale=MatchLowercase,BoldItalicFont={},ItalicFont={},Sm
+allCapsFont={},Script=Math,SizeFeatures={{Size=9.3075-},{Size=6.57-9.3075,Font=
+latinmodern-math.otf,Style=MathScript},{Size=-6.57,Font=latinmodern-math.otf,St
+yle=MathScriptScript}},BoldFont={latinmodern-math.otf}].
+(fontspec)              
+(fontspec)              This font family consists of the following NFSS
+(fontspec)             series/shapes:
+(fontspec)              
+(fontspec)             - 'normal' (m/n) with NFSS spec.:
+(fontspec)             <9.3075->s*[0.9999967668407183]"[latinmodern-math.otf]/O
+T:script=math;language=dflt;"<6.57-9.3075>s*[0.9999967668407183]"[latinmodern-m
+ath.otf]/OT:script=math;language=dflt;+ssty=0;"<-6.57>s*[0.9999967668407183]"[l
+atinmodern-math.otf]/OT:script=math;language=dflt;+ssty=1;"
+(fontspec)             - 'small caps'  (m/sc) with NFSS spec.: 
+(fontspec)             - 'bold' (b/n) with NFSS spec.:
+(fontspec)             <->s*[0.9999967668407183]"[latinmodern-math.otf]/OT:scri
+pt=math;language=dflt;"
+(fontspec)             - 'bold small caps'  (b/sc) with NFSS spec.: 
+
+LaTeX Font Info:    Font shape `TU/latinmodern-math.otf(1)/m/n' will be
+(Font)              scaled to size 10.95pt on input line 190.
+LaTeX Font Info:    Encoding `OT1' has changed to `TU' for symbol font
+(Font)              `operators' in the math version `normal' on input line 190.
+
+LaTeX Font Info:    Overwriting symbol font `operators' in version `normal'
+(Font)                  OT1/lmr/m/n --> TU/latinmodern-math.otf(1)/m/n on input
+ line 190.
+LaTeX Font Info:    Encoding `OT1' has changed to `TU' for symbol font
+(Font)              `operators' in the math version `bold' on input line 190.
+LaTeX Font Info:    Overwriting symbol font `operators' in version `bold'
+(Font)                  OT1/lmr/bx/n --> TU/latinmodern-math.otf(1)/b/n on inpu
+t line 190.
+
+Package fontspec Info: latinmodern-math scale = 0.9999967668407183.
+
+
+Package fontspec Info: latinmodern-math scale = 1.000096766517402.
+
+
+Package fontspec Info: latinmodern-math scale = 0.9999967668407183.
+
+
+Package fontspec Info: latinmodern-math scale = 1.000096766517402.
+
+
+Package fontspec Info: latinmodern-math scale = 0.9999967668407183.
+
+
+Package fontspec Info: latinmodern-math scale = 1.000096766517402.
+
+
+Package fontspec Info: latinmodern-math scale = 0.9999967668407183.
+
+
+Package fontspec Info: latinmodern-math scale = 1.000096766517402.
+
+
+Package fontspec Info: latinmodern-math scale = 0.9999967668407183.
+
+
+Package fontspec Info: latinmodern-math scale = 1.000096766517402.
+
+
+Package fontspec Info: Font family 'latinmodern-math.otf(2)' created for font
+(fontspec)             'latinmodern-math.otf' with options
+(fontspec)             [Scale=MatchLowercase,BoldItalicFont={},ItalicFont={},Sm
+allCapsFont={},Script=Math,SizeFeatures={{Size=9.3075-},{Size=6.57-9.3075,Font=
+latinmodern-math.otf,Style=MathScript},{Size=-6.57,Font=latinmodern-math.otf,St
+yle=MathScriptScript}},BoldFont={latinmodern-math.otf},ScaleAgain=1.0001,FontAd
+justment={\fontdimen
+(fontspec)             8\font =7.41315pt\relax \fontdimen 9\font
+(fontspec)             =4.3143pt\relax \fontdimen 10\font =4.8618pt\relax
+(fontspec)             \fontdimen 11\font =7.5117pt\relax \fontdimen 12\font
+(fontspec)             =3.77776pt\relax \fontdimen 13\font =3.97485pt\relax
+(fontspec)             \fontdimen 14\font =3.97485pt\relax \fontdimen 15\font
+(fontspec)             =3.16455pt\relax \fontdimen 16\font =2.70465pt\relax
+(fontspec)             \fontdimen 17\font =2.70465pt\relax \fontdimen 18\font
+(fontspec)             =2.7375pt\relax \fontdimen 19\font =2.19pt\relax
+(fontspec)             \fontdimen 22\font =2.7375pt\relax \fontdimen 20\font
+(fontspec)             =0pt\relax \fontdimen 21\font =0pt\relax }].
+(fontspec)              
+(fontspec)              This font family consists of the following NFSS
+(fontspec)             series/shapes:
+(fontspec)              
+(fontspec)             - 'normal' (m/n) with NFSS spec.:
+(fontspec)             <9.3075->s*[1.000096766517402]"[latinmodern-math.otf]/OT
+:script=math;language=dflt;"<6.57-9.3075>s*[1.000096766517402]"[latinmodern-mat
+h.otf]/OT:script=math;language=dflt;+ssty=0;"<-6.57>s*[1.000096766517402]"[lati
+nmodern-math.otf]/OT:script=math;language=dflt;+ssty=1;"
+(fontspec)             - 'small caps'  (m/sc) with NFSS spec.: 
+(fontspec)             and font adjustment code:
+(fontspec)             \fontdimen 8\font =7.41315pt\relax \fontdimen 9\font
+(fontspec)             =4.3143pt\relax \fontdimen 10\font =4.8618pt\relax
+(fontspec)             \fontdimen 11\font =7.5117pt\relax \fontdimen 12\font
+(fontspec)             =3.77776pt\relax \fontdimen 13\font =3.97485pt\relax
+(fontspec)             \fontdimen 14\font =3.97485pt\relax \fontdimen 15\font
+(fontspec)             =3.16455pt\relax \fontdimen 16\font =2.70465pt\relax
+(fontspec)             \fontdimen 17\font =2.70465pt\relax \fontdimen 18\font
+(fontspec)             =2.7375pt\relax \fontdimen 19\font =2.19pt\relax
+(fontspec)             \fontdimen 22\font =2.7375pt\relax \fontdimen 20\font
+(fontspec)             =0pt\relax \fontdimen 21\font =0pt\relax 
+(fontspec)             - 'bold' (b/n) with NFSS spec.:
+(fontspec)             <->s*[1.000096766517402]"[latinmodern-math.otf]/OT:scrip
+t=math;language=dflt;"
+(fontspec)             - 'bold small caps'  (b/sc) with NFSS spec.: 
+(fontspec)             and font adjustment code:
+(fontspec)             \fontdimen 8\font =7.41315pt\relax \fontdimen 9\font
+(fontspec)             =4.3143pt\relax \fontdimen 10\font =4.8618pt\relax
+(fontspec)             \fontdimen 11\font =7.5117pt\relax \fontdimen 12\font
+(fontspec)             =3.77776pt\relax \fontdimen 13\font =3.97485pt\relax
+(fontspec)             \fontdimen 14\font =3.97485pt\relax \fontdimen 15\font
+(fontspec)             =3.16455pt\relax \fontdimen 16\font =2.70465pt\relax
+(fontspec)             \fontdimen 17\font =2.70465pt\relax \fontdimen 18\font
+(fontspec)             =2.7375pt\relax \fontdimen 19\font =2.19pt\relax
+(fontspec)             \fontdimen 22\font =2.7375pt\relax \fontdimen 20\font
+(fontspec)             =0pt\relax \fontdimen 21\font =0pt\relax 
+
+LaTeX Font Info:    Encoding `OMS' has changed to `TU' for symbol font
+(Font)              `symbols' in the math version `normal' on input line 190.
+LaTeX Font Info:    Overwriting symbol font `symbols' in version `normal'
+(Font)                  OMS/lmsy/m/n --> TU/latinmodern-math.otf(2)/m/n on inpu
+t line 190.
+LaTeX Font Info:    Encoding `OMS' has changed to `TU' for symbol font
+(Font)              `symbols' in the math version `bold' on input line 190.
+LaTeX Font Info:    Overwriting symbol font `symbols' in version `bold'
+(Font)                  OMS/lmsy/b/n --> TU/latinmodern-math.otf(2)/b/n on inpu
+t line 190.
+
+Package fontspec Info: latinmodern-math scale = 0.9999967668407183.
+
+
+Package fontspec Info: latinmodern-math scale = 0.9998967671640342.
+
+
+Package fontspec Info: latinmodern-math scale = 0.9999967668407183.
+
+
+Package fontspec Info: latinmodern-math scale = 0.9998967671640342.
+
+
+Package fontspec Info: latinmodern-math scale = 0.9999967668407183.
+
+
+Package fontspec Info: latinmodern-math scale = 0.9998967671640342.
+
+
+Package fontspec Info: latinmodern-math scale = 0.9999967668407183.
+
+
+Package fontspec Info: latinmodern-math scale = 0.9998967671640342.
+
+
+Package fontspec Info: latinmodern-math scale = 0.9999967668407183.
+
+
+Package fontspec Info: latinmodern-math scale = 0.9998967671640342.
+
+
+Package fontspec Info: Font family 'latinmodern-math.otf(3)' created for font
+(fontspec)             'latinmodern-math.otf' with options
+(fontspec)             [Scale=MatchLowercase,BoldItalicFont={},ItalicFont={},Sm
+allCapsFont={},Script=Math,SizeFeatures={{Size=9.3075-},{Size=6.57-9.3075,Font=
+latinmodern-math.otf,Style=MathScript},{Size=-6.57,Font=latinmodern-math.otf,St
+yle=MathScriptScript}},BoldFont={latinmodern-math.otf},ScaleAgain=0.9999,FontAd
+justment={\fontdimen
+(fontspec)             8\font =0.438pt\relax \fontdimen 9\font =2.19pt\relax
+(fontspec)             \fontdimen 10\font =1.82864pt\relax \fontdimen 11\font
+(fontspec)             =1.21545pt\relax \fontdimen 12\font =6.56999pt\relax
+(fontspec)             \fontdimen 13\font =0pt\relax }].
+(fontspec)              
+(fontspec)              This font family consists of the following NFSS
+(fontspec)             series/shapes:
+(fontspec)              
+(fontspec)             - 'normal' (m/n) with NFSS spec.:
+(fontspec)             <9.3075->s*[0.9998967671640342]"[latinmodern-math.otf]/O
+T:script=math;language=dflt;"<6.57-9.3075>s*[0.9998967671640342]"[latinmodern-m
+ath.otf]/OT:script=math;language=dflt;+ssty=0;"<-6.57>s*[0.9998967671640342]"[l
+atinmodern-math.otf]/OT:script=math;language=dflt;+ssty=1;"
+(fontspec)             - 'small caps'  (m/sc) with NFSS spec.: 
+(fontspec)             and font adjustment code:
+(fontspec)             \fontdimen 8\font =0.438pt\relax \fontdimen 9\font
+(fontspec)             =2.19pt\relax \fontdimen 10\font =1.82864pt\relax
+(fontspec)             \fontdimen 11\font =1.21545pt\relax \fontdimen 12\font
+(fontspec)             =6.56999pt\relax \fontdimen 13\font =0pt\relax 
+(fontspec)             - 'bold' (b/n) with NFSS spec.:
+(fontspec)             <->s*[0.9998967671640342]"[latinmodern-math.otf]/OT:scri
+pt=math;language=dflt;"
+(fontspec)             - 'bold small caps'  (b/sc) with NFSS spec.: 
+(fontspec)             and font adjustment code:
+(fontspec)             \fontdimen 8\font =0.438pt\relax \fontdimen 9\font
+(fontspec)             =2.19pt\relax \fontdimen 10\font =1.82864pt\relax
+(fontspec)             \fontdimen 11\font =1.21545pt\relax \fontdimen 12\font
+(fontspec)             =6.56999pt\relax \fontdimen 13\font =0pt\relax 
+
+LaTeX Font Info:    Encoding `OMX' has changed to `TU' for symbol font
+(Font)              `largesymbols' in the math version `normal' on input line 1
+90.
+LaTeX Font Info:    Overwriting symbol font `largesymbols' in version `normal'
+(Font)                  OMX/lmex/m/n --> TU/latinmodern-math.otf(3)/m/n on inpu
+t line 190.
+LaTeX Font Info:    Encoding `OMX' has changed to `TU' for symbol font
+(Font)              `largesymbols' in the math version `bold' on input line 190
+.
+LaTeX Font Info:    Overwriting symbol font `largesymbols' in version `bold'
+(Font)                  OMX/lmex/m/n --> TU/latinmodern-math.otf(3)/b/n on inpu
+t line 190.
+LaTeX Info: Redefining \microtypecontext on input line 190.
+Package microtype Info: Applying patch `item' on input line 190.
+Package microtype Info: Applying patch `toc' on input line 190.
+Package microtype Info: Applying patch `eqnum' on input line 190.
+Package microtype Info: Applying patch `footnote' on input line 190.
+Package microtype Info: Character protrusion enabled (level 2).
+Package microtype Info: Using protrusion set `basicmath'.
+Package microtype Info: No adjustment of tracking.
+Package microtype Info: No adjustment of spacing.
+Package microtype Info: No adjustment of kerning.
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/microtype\mt-LatinModer
+nRoman.cfg
+File: mt-LatinModernRoman.cfg 2021/02/21 v1.1 microtype config. file: Latin Mod
+ern Roman (RS)
+)
+Package hyperref Info: Link coloring ON on input line 190.
+
+Package hyperref Warning: Rerun to get /PageLabels entry.
+
+Package caption Info: Begin \AtBeginDocument code.
+Package caption Info: float package is loaded.
+Package caption Info: End \AtBeginDocument code.
+Package microtype Info: Loading generic protrusion settings for font family
+(microtype)             `lmss' (encoding: TU).
+(microtype)             For optimal results, create family-specific settings.
+(microtype)             See the microtype manual for details.
+LaTeX Font Info:    Font shape `TU/latinmodern-math.otf(1)/m/n' will be
+(Font)              scaled to size 14.4pt on input line 192.
+LaTeX Font Info:    Font shape `TU/latinmodern-math.otf(1)/m/n' will be
+(Font)              scaled to size 10.0pt on input line 192.
+LaTeX Font Info:    Font shape `TU/latinmodern-math.otf(1)/m/n' will be
+(Font)              scaled to size 7.0pt on input line 192.
+LaTeX Font Info:    Trying to load font information for OML+lmm on input line 1
+92.
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/lm\omllmm.fd
+File: omllmm.fd 2015/05/01 v1.6.1 Font defs for Latin Modern
+)
+LaTeX Font Info:    Font shape `TU/latinmodern-math.otf(2)/m/n' will be
+(Font)              scaled to size 14.4013pt on input line 192.
+LaTeX Font Info:    Font shape `TU/latinmodern-math.otf(2)/m/n' will be
+(Font)              scaled to size 10.00092pt on input line 192.
+LaTeX Font Info:    Font shape `TU/latinmodern-math.otf(2)/m/n' will be
+(Font)              scaled to size 7.00064pt on input line 192.
+LaTeX Font Info:    Font shape `TU/latinmodern-math.otf(3)/m/n' will be
+(Font)              scaled to size 14.39845pt on input line 192.
+LaTeX Font Info:    Font shape `TU/latinmodern-math.otf(3)/m/n' will be
+(Font)              scaled to size 9.99893pt on input line 192.
+LaTeX Font Info:    Font shape `TU/latinmodern-math.otf(3)/m/n' will be
+(Font)              scaled to size 6.99925pt on input line 192.
+LaTeX Font Info:    Trying to load font information for U+msa on input line 192
+.
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/amsfonts\umsa.fd
+File: umsa.fd 2013/01/14 v3.01 AMS symbols A
+) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/microtype\mt-msa.cfg
+File: mt-msa.cfg 2006/02/04 v1.1 microtype config. file: AMS symbols (a) (RS)
+)
+LaTeX Font Info:    Trying to load font information for U+msb on input line 192
+.
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/amsfonts\umsb.fd
+File: umsb.fd 2013/01/14 v3.01 AMS symbols B
+) (C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/microtype\mt-msb.cfg
+File: mt-msb.cfg 2005/06/01 v1.0 microtype config. file: AMS symbols (b) (RS)
+) [1
+
+
+
+]
+Package tocbasic Info: character protrusion at toc deactivated on input line 19
+8.
+No file index.toc.
+\tf@toc=\write4
+\openout4 = `index.toc'.
+
+[2
+
+]
+LaTeX Font Info:    Font shape `TU/latinmodern-math.otf(1)/m/n' will be
+(Font)              scaled to size 7.665pt on input line 209.
+LaTeX Font Info:    Font shape `TU/latinmodern-math.otf(1)/m/n' will be
+(Font)              scaled to size 5.475pt on input line 209.
+LaTeX Font Info:    Font shape `TU/latinmodern-math.otf(2)/m/n' will be
+(Font)              scaled to size 10.95099pt on input line 209.
+LaTeX Font Info:    Font shape `TU/latinmodern-math.otf(2)/m/n' will be
+(Font)              scaled to size 7.66568pt on input line 209.
+LaTeX Font Info:    Font shape `TU/latinmodern-math.otf(2)/m/n' will be
+(Font)              scaled to size 5.4755pt on input line 209.
+LaTeX Font Info:    Font shape `TU/latinmodern-math.otf(3)/m/n' will be
+(Font)              scaled to size 10.94882pt on input line 209.
+LaTeX Font Info:    Font shape `TU/latinmodern-math.otf(3)/m/n' will be
+(Font)              scaled to size 7.66417pt on input line 209.
+LaTeX Font Info:    Font shape `TU/latinmodern-math.otf(3)/m/n' will be
+(Font)              scaled to size 5.47441pt on input line 209.
+
+(C:\Users\jakev\AppData\Local\Programs\MiKTeX\tex/latex/microtype\mt-TU-empty.c
+fg
+File: mt-TU-empty.cfg 2021/06/22 v1.1 microtype config. file: fonts with nonsta
+ndard glyph set (RS)
+) [3
+
+]
+chapter 1.
+
+Class scrreprt Warning: \float@addtolists detected!
+(scrreprt)              Implementation of \float@addtolist became
+(scrreprt)              deprecated in KOMA-Script v3.01 2008/11/14 and
+(scrreprt)              has been replaced by several more flexible
+(scrreprt)              features of package `tocbasic`.
+(scrreprt)              Since Version 3.12 support for deprecated
+(scrreprt)              \float@addtolist interface has been
+(scrreprt)              restricted to only some of the KOMA-Script
+(scrreprt)              features and been removed from others.
+(scrreprt)              Loading of package `scrhack' may help to
+(scrreprt)              avoid this warning, if you are using a
+(scrreprt)              a package that still implements the
+(scrreprt)              deprecated \float@addtolist interface.
+
+
+LaTeX Warning: File `https://hackernoon.com/hn-images/1*nT3RAGnOAWmKmvOBnizNtw.
+png' not found on input line 246.
+
+! Unable to load picture or PDF file 'https://hackernoon.com/hn-images/1*nT3RAG
+nOAWmKmvOBnizNtw.png'.
+<to be read again> 
+                   }
+l.246 ...m/hn-images/1*nT3RAGnOAWmKmvOBnizNtw.png}
+                                                   
+Here is how much of TeX's memory you used:
+ 39122 strings out of 410670
+ 803217 string characters out of 2816707
+ 1429357 words of memory out of 3000000
+ 59625 multiletter control sequences out of 15000+600000
+ 475690 words of font info for 78 fonts, out of 8000000 for 9000
+ 1348 hyphenation exceptions out of 8191
+ 108i,7n,121p,10602b,921s stack positions out of 10000i,1000n,20000p,200000b,80000s
+
+Output written on index.pdf (3 pages).
diff --git a/index.pdf b/index.pdf
new file mode 100644
index 0000000000000000000000000000000000000000..aff2315cf77dbac9d52ce744098a67473aac2d0e
GIT binary patch
literal 13960
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
NOt7S+!m=W;{|oJobJ73+

literal 0
HcmV?d00001

diff --git a/index.qmd b/index.qmd
new file mode 100644
index 0000000..aa35ae7
--- /dev/null
+++ b/index.qmd
@@ -0,0 +1,15 @@
+# Preface {.unnumbered}
+
+This book is a compilation of lecture notes from the MIT Course 18.337J/6.338J: Parallel Computing and Scientific Machine Learning.
+It is meant to be a live document, updating to continuously add the latest details on methods from the field of scientific machine learning and 
+the latest techniques for high-performance computing.
+
+::: {.callout-note}
+You can help improve this course!
+Please
+[report mistakes](https://github.com/SciML/SciMLBook/issues/new?assignees=&labels=bug&template=bug-report.md&title=Fix+Mistake)
+you find in the content.
+Similarly,
+[suggest improvements](https://github.com/SciML/SciMLBook/issues/new?assignees=&labels=enhancement&template=feature_request.md&title=New+Feature) 
+on how to organize and navigate this site.
+:::
diff --git a/index.tex b/index.tex
new file mode 100644
index 0000000..1ef811a
--- /dev/null
+++ b/index.tex
@@ -0,0 +1,303 @@
+% Options for packages loaded elsewhere
+\PassOptionsToPackage{unicode}{hyperref}
+\PassOptionsToPackage{hyphens}{url}
+\PassOptionsToPackage{dvipsnames,svgnames,x11names}{xcolor}
+%
+\documentclass[
+  letterpaper,
+  DIV=11,
+  numbers=noendperiod]{scrreprt}
+
+\usepackage{amsmath,amssymb}
+\usepackage{lmodern}
+\usepackage{iftex}
+\ifPDFTeX
+  \usepackage[T1]{fontenc}
+  \usepackage[utf8]{inputenc}
+  \usepackage{textcomp} % provide euro and other symbols
+\else % if luatex or xetex
+  \usepackage{unicode-math}
+  \defaultfontfeatures{Scale=MatchLowercase}
+  \defaultfontfeatures[\rmfamily]{Ligatures=TeX,Scale=1}
+\fi
+% Use upquote if available, for straight quotes in verbatim environments
+\IfFileExists{upquote.sty}{\usepackage{upquote}}{}
+\IfFileExists{microtype.sty}{% use microtype if available
+  \usepackage[]{microtype}
+  \UseMicrotypeSet[protrusion]{basicmath} % disable protrusion for tt fonts
+}{}
+\makeatletter
+\@ifundefined{KOMAClassName}{% if non-KOMA class
+  \IfFileExists{parskip.sty}{%
+    \usepackage{parskip}
+  }{% else
+    \setlength{\parindent}{0pt}
+    \setlength{\parskip}{6pt plus 2pt minus 1pt}}
+}{% if KOMA class
+  \KOMAoptions{parskip=half}}
+\makeatother
+\usepackage{xcolor}
+\setlength{\emergencystretch}{3em} % prevent overfull lines
+\setcounter{secnumdepth}{5}
+% Make \paragraph and \subparagraph free-standing
+\ifx\paragraph\undefined\else
+  \let\oldparagraph\paragraph
+  \renewcommand{\paragraph}[1]{\oldparagraph{#1}\mbox{}}
+\fi
+\ifx\subparagraph\undefined\else
+  \let\oldsubparagraph\subparagraph
+  \renewcommand{\subparagraph}[1]{\oldsubparagraph{#1}\mbox{}}
+\fi
+
+
+\providecommand{\tightlist}{%
+  \setlength{\itemsep}{0pt}\setlength{\parskip}{0pt}}\usepackage{longtable,booktabs,array}
+\usepackage{calc} % for calculating minipage widths
+% Correct order of tables after \paragraph or \subparagraph
+\usepackage{etoolbox}
+\makeatletter
+\patchcmd\longtable{\par}{\if@noskipsec\mbox{}\fi\par}{}{}
+\makeatother
+% Allow footnotes in longtable head/foot
+\IfFileExists{footnotehyper.sty}{\usepackage{footnotehyper}}{\usepackage{footnote}}
+\makesavenoteenv{longtable}
+\usepackage{graphicx}
+\makeatletter
+\def\maxwidth{\ifdim\Gin@nat@width>\linewidth\linewidth\else\Gin@nat@width\fi}
+\def\maxheight{\ifdim\Gin@nat@height>\textheight\textheight\else\Gin@nat@height\fi}
+\makeatother
+% Scale images if necessary, so that they will not overflow the page
+% margins by default, and it is still possible to overwrite the defaults
+% using explicit options in \includegraphics[width, height, ...]{}
+\setkeys{Gin}{width=\maxwidth,height=\maxheight,keepaspectratio}
+% Set default figure placement to htbp
+\makeatletter
+\def\fps@figure{htbp}
+\makeatother
+\newlength{\cslhangindent}
+\setlength{\cslhangindent}{1.5em}
+\newlength{\csllabelwidth}
+\setlength{\csllabelwidth}{3em}
+\newlength{\cslentryspacingunit} % times entry-spacing
+\setlength{\cslentryspacingunit}{\parskip}
+\newenvironment{CSLReferences}[2] % #1 hanging-ident, #2 entry spacing
+ {% don't indent paragraphs
+  \setlength{\parindent}{0pt}
+  % turn on hanging indent if param 1 is 1
+  \ifodd #1
+  \let\oldpar\par
+  \def\par{\hangindent=\cslhangindent\oldpar}
+  \fi
+  % set entry spacing
+  \setlength{\parskip}{#2\cslentryspacingunit}
+ }%
+ {}
+\usepackage{calc}
+\newcommand{\CSLBlock}[1]{#1\hfill\break}
+\newcommand{\CSLLeftMargin}[1]{\parbox[t]{\csllabelwidth}{#1}}
+\newcommand{\CSLRightInline}[1]{\parbox[t]{\linewidth - \csllabelwidth}{#1}\break}
+\newcommand{\CSLIndent}[1]{\hspace{\cslhangindent}#1}
+
+\KOMAoption{captions}{tableheading}
+\makeatletter
+\@ifpackageloaded{tcolorbox}{}{\usepackage[many]{tcolorbox}}
+\@ifpackageloaded{fontawesome5}{}{\usepackage{fontawesome5}}
+\definecolor{quarto-callout-color}{HTML}{909090}
+\definecolor{quarto-callout-note-color}{HTML}{0758E5}
+\definecolor{quarto-callout-important-color}{HTML}{CC1914}
+\definecolor{quarto-callout-warning-color}{HTML}{EB9113}
+\definecolor{quarto-callout-tip-color}{HTML}{00A047}
+\definecolor{quarto-callout-caution-color}{HTML}{FC5300}
+\definecolor{quarto-callout-color-frame}{HTML}{acacac}
+\definecolor{quarto-callout-note-color-frame}{HTML}{4582ec}
+\definecolor{quarto-callout-important-color-frame}{HTML}{d9534f}
+\definecolor{quarto-callout-warning-color-frame}{HTML}{f0ad4e}
+\definecolor{quarto-callout-tip-color-frame}{HTML}{02b875}
+\definecolor{quarto-callout-caution-color-frame}{HTML}{fd7e14}
+\makeatother
+\makeatletter
+\makeatother
+\makeatletter
+\@ifpackageloaded{bookmark}{}{\usepackage{bookmark}}
+\makeatother
+\makeatletter
+\@ifpackageloaded{caption}{}{\usepackage{caption}}
+\AtBeginDocument{%
+\ifdefined\contentsname
+  \renewcommand*\contentsname{Table of contents}
+\else
+  \newcommand\contentsname{Table of contents}
+\fi
+\ifdefined\listfigurename
+  \renewcommand*\listfigurename{List of Figures}
+\else
+  \newcommand\listfigurename{List of Figures}
+\fi
+\ifdefined\listtablename
+  \renewcommand*\listtablename{List of Tables}
+\else
+  \newcommand\listtablename{List of Tables}
+\fi
+\ifdefined\figurename
+  \renewcommand*\figurename{Figure}
+\else
+  \newcommand\figurename{Figure}
+\fi
+\ifdefined\tablename
+  \renewcommand*\tablename{Table}
+\else
+  \newcommand\tablename{Table}
+\fi
+}
+\@ifpackageloaded{float}{}{\usepackage{float}}
+\floatstyle{ruled}
+\@ifundefined{c@chapter}{\newfloat{codelisting}{h}{lop}}{\newfloat{codelisting}{h}{lop}[chapter]}
+\floatname{codelisting}{Listing}
+\newcommand*\listoflistings{\listof{codelisting}{List of Listings}}
+\makeatother
+\makeatletter
+\@ifpackageloaded{caption}{}{\usepackage{caption}}
+\@ifpackageloaded{subcaption}{}{\usepackage{subcaption}}
+\makeatother
+\makeatletter
+\@ifpackageloaded{tcolorbox}{}{\usepackage[many]{tcolorbox}}
+\makeatother
+\makeatletter
+\@ifundefined{shadecolor}{\definecolor{shadecolor}{rgb}{.97, .97, .97}}
+\makeatother
+\makeatletter
+\makeatother
+\ifLuaTeX
+  \usepackage{selnolig}  % disable illegal ligatures
+\fi
+\IfFileExists{bookmark.sty}{\usepackage{bookmark}}{\usepackage{hyperref}}
+\IfFileExists{xurl.sty}{\usepackage{xurl}}{} % add URL line breaks if available
+\urlstyle{same} % disable monospaced font for URLs
+\hypersetup{
+  pdftitle={QuartoTest},
+  pdfauthor={JuliaHub \& MIT},
+  colorlinks=true,
+  linkcolor={blue},
+  filecolor={Maroon},
+  citecolor={Blue},
+  urlcolor={Blue},
+  pdfcreator={LaTeX via pandoc}}
+
+\title{QuartoTest}
+\author{JuliaHub \& MIT}
+\date{11/17/202}
+
+\begin{document}
+\maketitle
+\ifdefined\Shaded\renewenvironment{Shaded}{\begin{tcolorbox}[boxrule=0pt, enhanced, frame hidden, sharp corners, borderline west={3pt}{0pt}{shadecolor}, interior hidden, breakable]}{\end{tcolorbox}}\fi
+
+\renewcommand*\contentsname{Table of contents}
+{
+\hypersetup{linkcolor=}
+\setcounter{tocdepth}{2}
+\tableofcontents
+}
+\bookmarksetup{startatroot}
+
+\hypertarget{preface}{%
+\chapter*{Preface}\label{preface}}
+\addcontentsline{toc}{chapter}{Preface}
+
+This is a Quarto book.
+
+To learn more about Quarto books visit
+\url{https://quarto.org/docs/books}.
+
+\begin{tcolorbox}[enhanced jigsaw, arc=.35mm, opacityback=0, colback=white, left=2mm, breakable, colframe=quarto-callout-tip-color-frame, toprule=.15mm, leftrule=.75mm, opacitybacktitle=0.6, title=\textcolor{quarto-callout-tip-color}{\faLightbulb}\hspace{0.5em}{Tip}, bottomtitle=1mm, toptitle=1mm, titlerule=0mm, bottomrule=.15mm, rightrule=.15mm, colbacktitle=quarto-callout-tip-color!10!white, coltitle=black]
+Here is a very important tip!
+\end{tcolorbox}
+
+Thanks to Knuth (1984).
+
+\bookmarksetup{startatroot}
+
+\hypertarget{optimizing-serial-code}{%
+\chapter{Optimizing Serial Code}\label{optimizing-serial-code}}
+
+At the center of any fast parallel code is a fast serial code.
+Parallelism is made to be a performance multiplier, so if you start from
+a bad position it won't ever get much better. Thus the first thing that
+we need to do is understand what makes code slow and how to avoid the
+pitfalls. This discussion of serial code optimization will also directly
+motivate why we will be using Julia throughout this course.
+
+\hypertarget{mental-model-of-a-memory}{%
+\section{Mental Model of a Memory}\label{mental-model-of-a-memory}}
+
+To start optimizing code you need a good mental model of a computer.
+
+\hypertarget{high-level-view}{%
+\subsection{High Level View}\label{high-level-view}}
+
+At the highest level you have a CPU's core memory which directly
+accesses a L1 cache. The L1 cache has the fastest access, so things
+which will be needed soon are kept there. However, it is filled from the
+L2 cache, which itself is filled from the L3 cache, which is filled from
+the main memory. This bring us to the first idea in optimizing code:
+using things that are already in a closer cache can help the code run
+faster because it doesn't have to be queried for and moved up this
+chain.
+
+\includegraphics{https://hackernoon.com/hn-images/1*nT3RAGnOAWmKmvOBnizNtw.png}
+
+When something needs to be pulled directly from main memory this is
+known as a \emph{cache miss}. To understand the cost of a cache miss vs
+standard calculations, take a look at
+\href{http://ithare.com/infographics-operation-costs-in-cpu-clock-cycles/}{this
+classic chart}.
+
+(Cache-aware and cache-oblivious algorithms are methods which change
+their indexing structure to optimize their use of the cache lines. We
+will return to this when talking about performance of linear algebra.)
+
+\hypertarget{cache-lines-and-rowcolumn-major}{%
+\subsection{Cache Lines and
+Row/Column-Major}\label{cache-lines-and-rowcolumn-major}}
+
+Many algorithms in numerical linear algebra are designed to minimize
+cache misses. Because of this chain, many modern CPUs try to guess what
+you will want next in your cache. When dealing with arrays, it will
+speculate ahead and grab what is known as a \emph{cache line}: the next
+chunk in the array. Thus, your algorithms will be faster if you iterate
+along the values that it is grabbing.
+
+The values that it grabs are the next values in the contiguous order of
+the stored array. There are two common conventions: row major and column
+major. Row major means that the linear array of memory is formed by
+stacking the rows one after another, while column major puts the column
+vectors one after another.
+
+\includegraphics{https://eli.thegreenplace.net/images/2015/column-major-2D.png}
+
+\emph{Julia, MATLAB, and Fortran are column major}. Python's numpy is
+row-major.
+
+\bookmarksetup{startatroot}
+
+\hypertarget{summary}{%
+\chapter{Summary}\label{summary}}
+
+In summary, this book has no content whatsoever.
+
+\bookmarksetup{startatroot}
+
+\hypertarget{references}{%
+\chapter*{References}\label{references}}
+\addcontentsline{toc}{chapter}{References}
+
+\hypertarget{refs}{}
+\begin{CSLReferences}{1}{0}
+\leavevmode\vadjust pre{\hypertarget{ref-knuth84}{}}%
+Knuth, Donald E. 1984. {``Literate Programming.''} \emph{Comput. J.} 27
+(2): 97--111. \url{https://doi.org/10.1093/comjnl/27.2.97}.
+
+\end{CSLReferences}
+
+
+
+\end{document}
diff --git a/index.toc b/index.toc
new file mode 100644
index 0000000..e69de29
diff --git a/intro.ipynb b/intro.ipynb
new file mode 100644
index 0000000..7505fd0
--- /dev/null
+++ b/intro.ipynb
@@ -0,0 +1,93 @@
+{
+  "cells": [
+    {
+      "cell_type": "markdown",
+      "metadata": {},
+      "source": [
+        "# Introduction to Parallel Computing\n",
+        "\n",
+        "There are two main branches of technical computing: machine learning and\n",
+        "scientific computing. Machine learning has received a lot of hype over the\n",
+        "last decade, with techniques such as convolutional neural networks and TSne\n",
+        "nonlinear dimensional reductions powering a new generation of data-driven\n",
+        "analytics. On the other hand, many scientific disciplines carry on with\n",
+        "large-scale modeling through differential equation modeling, looking at\n",
+        "stochastic differential equations and partial differential equations describing\n",
+        "scientific laws.\n",
+        "\n",
+        "However, there has been a recent convergence of the two disciplines. This field,\n",
+        "scientific machine learning, has been showcasing results like how partial\n",
+        "differential equation simulations can be accelerated with neural networks.\n",
+        "New methods, such as probabilistic and differentiable programming, have\n",
+        "started to be developed specifically for enhancing the tools of this domain.\n",
+        "However, the techniques in this field combine two huge areas of computational\n",
+        "and numerical practice, meaning that the methods are sufficiently complex.\n",
+        "How do you backpropagate an ODE defined by neural networks? How do you perform\n",
+        "unsupervised learning of a scientific simulator?\n",
+        "\n",
+        "In this class we will dig into the methods and understand what they do, why\n",
+        "they were made, and thus how to integrate numerical methods across fields to\n",
+        "accentuate their pros while mitigating their cons. This class will be a survey\n",
+        "of the numerical techniques, showcasing how many disciplines are doing the\n",
+        "same thing under different names, and using a common mathematical language\n",
+        "to derive efficient routines which capture both data-driven and mechanistic-based\n",
+        "modeling.\n",
+        "\n",
+        "However, these methods will quickly run into a scaling issue if naively coded.\n",
+        "To handle this problem, everything will have a focus on performance-engineering.\n",
+        "We will start by focusing on algorithm which are inherently serial and\n",
+        "learn to optimize serial code. Then we will showcase how logic-heavy\n",
+        "code can be parallelized through multithreading and distributed computing\n",
+        "techniques like MPI, while direct mathematical descriptions can be parallelized\n",
+        "through GPU computing.\n",
+        "\n",
+        "The final part of the course will be a unique project which pulls together these\n",
+        "techniques. As a new field, the students will be exposed to the \"low hanging\n",
+        "fruit\" and will be directed towards an area which they can make a quick impact.\n",
+        "For the final project, students will team up to solve a new problem in the field of\n",
+        "scientific machine learning, and receive helping writing up a publication-quality\n",
+        "analysis about their work.\n",
+        "\n",
+        "## Test Inserting Code\n",
+        "\n",
+        "Can we insert code from another file?\n"
+      ],
+      "id": "1f6a5792"
+    },
+    {
+      "cell_type": "code",
+      "metadata": {},
+      "source": [
+        "test(x) = x^x\n",
+        "map(test, 1:4)"
+      ],
+      "id": "ae92fe60",
+      "execution_count": null,
+      "outputs": []
+    },
+    {
+      "cell_type": "markdown",
+      "metadata": {},
+      "source": [
+        "Yes we can!\n",
+        "\n",
+        "::: {.callout-tip}\n",
+        "A couple of important things to remember when using computational includes:\n",
+        "\n",
+        "1. All computations still share a single engine (e.g. knitr or jupyter)\n",
+        "1. Computational includes work only in `.qmd` files (they don’t work in `.ipynb` notebook files)\n",
+        ":::"
+      ],
+      "id": "b9e733e7"
+    }
+  ],
+  "metadata": {
+    "kernelspec": {
+      "name": "julia-1.8",
+      "language": "julia",
+      "display_name": "Julia 1.8.2"
+    }
+  },
+  "nbformat": 4,
+  "nbformat_minor": 5
+}
\ No newline at end of file
diff --git a/intro.qmd b/intro.qmd
new file mode 100644
index 0000000..71d1283
--- /dev/null
+++ b/intro.qmd
@@ -0,0 +1,43 @@
+# Introduction to Parallel Computing
+
+There are two main branches of technical computing: machine learning and
+scientific computing. Machine learning has received a lot of hype over the
+last decade, with techniques such as convolutional neural networks and TSne
+nonlinear dimensional reductions powering a new generation of data-driven
+analytics. On the other hand, many scientific disciplines carry on with
+large-scale modeling through differential equation modeling, looking at
+stochastic differential equations and partial differential equations describing
+scientific laws.
+
+However, there has been a recent convergence of the two disciplines. This field,
+scientific machine learning, has been showcasing results like how partial
+differential equation simulations can be accelerated with neural networks.
+New methods, such as probabilistic and differentiable programming, have
+started to be developed specifically for enhancing the tools of this domain.
+However, the techniques in this field combine two huge areas of computational
+and numerical practice, meaning that the methods are sufficiently complex.
+How do you backpropagate an ODE defined by neural networks? How do you perform
+unsupervised learning of a scientific simulator?
+
+In this class we will dig into the methods and understand what they do, why
+they were made, and thus how to integrate numerical methods across fields to
+accentuate their pros while mitigating their cons. This class will be a survey
+of the numerical techniques, showcasing how many disciplines are doing the
+same thing under different names, and using a common mathematical language
+to derive efficient routines which capture both data-driven and mechanistic-based
+modeling.
+
+However, these methods will quickly run into a scaling issue if naively coded.
+To handle this problem, everything will have a focus on performance-engineering.
+We will start by focusing on algorithm which are inherently serial and
+learn to optimize serial code. Then we will showcase how logic-heavy
+code can be parallelized through multithreading and distributed computing
+techniques like MPI, while direct mathematical descriptions can be parallelized
+through GPU computing.
+
+The final part of the course will be a unique project which pulls together these
+techniques. As a new field, the students will be exposed to the "low hanging
+fruit" and will be directed towards an area which they can make a quick impact.
+For the final project, students will team up to solve a new problem in the field of
+scientific machine learning, and receive helping writing up a publication-quality
+analysis about their work.
diff --git a/optimize.qmd b/optimize.qmd
new file mode 100644
index 0000000..dd1d7fe
--- /dev/null
+++ b/optimize.qmd
@@ -0,0 +1,1240 @@
+# Optimizing Serial Code
+
+At the center of any fast parallel code is a fast serial code. Parallelism
+is made to be a performance multiplier, so if you start from a bad position it
+won't ever get much better. Thus the first thing that we need to do is understand 
+what makes code slow and how to avoid the pitfalls. This discussion of serial
+code optimization will also directly motivate why we will be using Julia
+throughout this course.
+
+```{julia}
+#| echo: false
+#| output: false
+using Pkg
+Pkg.add("StaticArrays")
+Pkg.add("BenchmarkTools")
+Pkg.add("InteractiveUtils")
+Pkg.add("LinearAlgebra")
+Pkg.add("Plots")
+```
+
+## Mental Model of a Memory
+
+To start optimizing code you need a good mental model of a computer.
+
+### High Level View
+
+At the highest level you have a CPU's core memory which directly accesses a
+L1 cache. The L1 cache has the fastest access, so things which will be needed
+soon are kept there. However, it is filled from the L2 cache, which itself
+is filled from the L3 cache, which is filled from the main memory. This bring
+us to the first idea in optimizing code: using things that are already in
+a closer cache can help the code run faster because it doesn't have to be
+queried for and moved up this chain.
+
+![](https://hackernoon.com/hn-images/1*nT3RAGnOAWmKmvOBnizNtw.png)
+
+When something needs to be pulled directly from main memory this is known as a
+*cache miss*. To understand the cost of a cache miss vs standard calculations,
+take a look at [this classic chart](http://ithare.com/infographics-operation-costs-in-cpu-clock-cycles/).
+
+(Cache-aware and cache-oblivious algorithms are methods which change their
+indexing structure to optimize their use of the cache lines. We will return
+to this when talking about performance of linear algebra.)
+
+### Cache Lines and Row/Column-Major
+
+Many algorithms in numerical
+linear algebra are designed to minimize cache misses. Because of this chain,
+many modern CPUs try to guess what you will want next in your cache. When
+dealing with arrays, it will speculate ahead and grab what is known as a *cache
+line*: the next chunk in the array. Thus, your algorithms will be faster if
+you iterate along the values that it is grabbing.
+
+The values that it grabs are the next values in the contiguous order of the
+stored array. There are two common conventions: row major and column major.
+Row major means that the linear array of memory is formed by stacking the
+rows one after another, while column major puts the column vectors one after
+another.
+
+![](https://eli.thegreenplace.net/images/2015/column-major-2D.png)
+
+*Julia, MATLAB, and Fortran are column major*. Python's numpy is row-major.
+
+```{julia}
+A = rand(100, 100)
+B = rand(100, 100)
+C = rand(100, 100)
+using BenchmarkTools
+function inner_rows!(C, A, B)
+  for i in 1:100, j in 1:100
+    C[i, j] = A[i, j] + B[i, j]
+  end
+end
+@btime inner_rows!(C, A, B)
+```
+
+```{julia}
+function inner_cols!(C, A, B)
+  for j in 1:100, i in 1:100
+    C[i, j] = A[i, j] + B[i, j]
+  end
+end
+@btime inner_cols!(C, A, B)
+```
+
+### Lower Level View: The Stack and the Heap
+
+Locally, the stack is composed of a *stack* and a *heap*. The stack requires a
+static allocation: it is ordered. Because it's ordered, it is very clear where
+things are in the stack, and therefore accesses are very quick (think
+instantaneous). However, because this is static, it requires that the size
+of the variables is known at compile time (to determine all of the variable
+locations). Since that is not possible with all variables, there exists the
+heap. The heap is essentially a stack of pointers to objects in memory. When
+heap variables are needed, their values are pulled up the cache chain and
+accessed.
+
+![](https://bayanbox.ir/view/581244719208138556/virtual-memory.jpg)
+![](https://camo.githubusercontent.com/ca96d70d09ce694363e44b93fd975bb3033898c1/687474703a2f2f7475746f7269616c732e6a656e6b6f762e636f6d2f696d616765732f6a6176612d636f6e63757272656e63792f6a6176612d6d656d6f72792d6d6f64656c2d352e706e67)
+
+### Heap Allocations and Speed
+
+Heap allocations are costly because they involve this pointer indirection,
+so stack allocation should be done when sensible (it's not helpful for really
+large arrays, but for small values like scalars it's essential!)
+
+```{julia}
+function inner_alloc!(C, A, B)
+  for j in 1:100, i in 1:100
+    val = [A[i, j] + B[i, j]]
+    C[i, j] = val[1]
+  end
+end
+@btime inner_alloc!(C, A, B)
+```
+
+```{julia}
+function inner_noalloc!(C, A, B)
+  for j in 1:100, i in 1:100
+    val = A[i, j] + B[i, j]
+    C[i, j] = val[1]
+  end
+end
+@btime inner_noalloc!(C, A, B)
+```
+
+Why does the array here get heap-allocated? It isn't able to prove/guarantee
+at compile-time that the array's size will always be a given value, and thus
+it allocates it to the heap. `@btime` tells us this allocation occurred and
+shows us the total heap memory that was taken. Meanwhile, the size of a Float64
+number is known at compile-time (64-bits), and so this is stored onto the stack
+and given a specific location that the compiler will be able to directly
+address.
+
+Note that one can use the StaticArrays.jl library to get statically-sized arrays
+and thus arrays which are stack-allocated:
+
+```{julia}
+using StaticArrays
+function static_inner_alloc!(C, A, B)
+  for j in 1:100, i in 1:100
+    val = @SVector [A[i, j] + B[i, j]]
+    C[i, j] = val[1]
+  end
+end
+@btime static_inner_alloc!(C, A, B)
+```
+
+### Mutation to Avoid Heap Allocations
+
+Many times you do need to write into an array, so how can you write into an
+array without performing a heap allocation? The answer is mutation. Mutation
+is changing the values of an already existing array. In that case, no free
+memory has to be found to put the array (and no memory has to be freed by
+the garbage collector).
+
+In Julia, functions which mutate the first value are conventionally noted by
+a `!`. See the difference between these two equivalent functions:
+
+```{julia}
+function inner_noalloc!(C, A, B)
+  for j in 1:100, i in 1:100
+    val = A[i, j] + B[i, j]
+    C[i, j] = val[1]
+  end
+end
+@btime inner_noalloc!(C, A, B)
+```
+
+```{julia}
+function inner_alloc(A, B)
+  C = similar(A)
+  for j in 1:100, i in 1:100
+    val = A[i, j] + B[i, j]
+    C[i, j] = val[1]
+  end
+end
+@btime inner_alloc(A, B)
+```
+
+To use this algorithm effectively, the `!` algorithm assumes that the caller
+already has allocated the output array to put as the output argument. If that
+is not true, then one would need to manually allocate. The goal of that interface
+is to give the caller control over the allocations to allow them to manually
+reduce the total number of heap allocations and thus increase the speed.
+
+### Julia's Broadcasting Mechanism
+
+Wouldn't it be nice to not have to write the loop there? In many high level
+languages this is simply called *vectorization*. In Julia, we will call it
+*array vectorization* to distinguish it from the *SIMD vectorization* which
+is common in lower level languages like C, Fortran, and Julia.
+
+In Julia, if you use `.` on an operator it will transform it to the broadcasted
+form. Broadcast is *lazy*: it will build up an entire `.`'d expression and then
+call `broadcast!` on composed expression. This is customizable and
+[documented in detail](https://docs.julialang.org/en/v1/manual/interfaces/#man-interfaces-broadcasting-1).
+However, to a first approximation we can think of the broadcast mechanism as a
+mechanism for building *fused expressions*. For example, the Julia code:
+
+```{julia}
+#| eval: false
+A .+ B .+ C;
+```
+
+under the hood lowers to something like:
+
+```{julia}
+#| eval: false
+map((a, b, c) -> a + b + c, A, B, C);
+```
+
+where `map` is a function that just loops over the values element-wise.
+
+::: {.callout-tip}
+Take a quick second to think about why loop fusion may be an optimization.
+:::
+
+This about what would happen if you did not fuse the operations. We can write
+that out as:
+
+```{julia}
+#| eval: false
+tmp = A .+ B
+tmp .+ C;
+```
+
+Notice that if we did not fuse the expressions, we would need some place to put
+the result of `A .+ B`, and that would have to be an array, which means it would
+cause a heap allocation. Thus broadcast fusion eliminates the *temporary variable*
+(colloquially called just a *temporary*).
+
+```{julia}
+function unfused(A,  B, C)
+  tmp = A .+ B
+  tmp .+ C
+end
+@btime unfused(A, B, C);
+```
+
+```{julia}
+fused(A, B, C) = A .+ B .+ C
+@btime fused(A, B, C);
+```
+
+Note that we can also fuse the output by using `.=`. This is essentially the
+vectorized version of a `!` function:
+
+```{julia}
+D = similar(A)
+fused!(D, A, B, C) = (D .= A .+ B .+ C)
+@btime fused!(D, A, B, C);
+```
+
+### Note on Broadcasting Function Calls
+
+Julia allows for broadcasting the call `()` operator as well. `.()` will call
+the function element-wise on all arguments, so `sin.(A)` will be the elementwise
+sine function. This will fuse Julia like the other operators.
+
+### Note on Vectorization and Speed
+
+In articles on MATLAB, Python, R, etc., this is where you will be told to
+vectorize your code. Notice from above that this isn't a performance difference
+between writing loops and using vectorized broadcasts. This is not abnormal!
+The reason why you are told to vectorize code in these other languages is because
+they have a high per-operation overhead (which will be discussed further down).
+This means that every call, like `+`, is costly in these languages. To get around
+this issue and make the language usable, someone wrote and compiled the loop
+for the C/Fortran function that does the broadcasted form (see numpy's Github repo).
+Thus `A .+ B`'s MATLAB/Python/R equivalents are calling a single C function
+to generally avoid the cost of function calls and thus are faster.
+
+But this is not an intrinsic property of vectorization. Vectorization isn't
+"fast" in these languages, it's just close to the correct speed. The reason
+vectorization is recommended is because looping is slow in these languages.
+Because looping isn't slow in Julia (or C, C++, Fortran, etc.), loops and vectorization
+generally have the same speed. So use the one that works best for your code
+without a care about performance.
+
+(As a small side effect, these high level languages tend to allocate a lot of
+temporary variables since the individual C kernels are written for specific
+numbers of inputs and thus don't naturally fuse. Julia's broadcast mechanism
+is just generating and JIT compiling Julia functions on the fly, and thus it
+can accommodate the combinatorial explosion in the amount of choices just by
+only compiling the combinations that are necessary for a specific code)
+
+### Heap Allocations from Slicing
+
+It's important to note that slices in Julia produce copies instead of views.
+Thus for example:
+
+```{julia}
+A[50, 50]
+```
+
+allocates a new output. This is for safety, since if it pointed to the same
+array then writing to it would change the original array. We can demonstrate
+this by asking for a *view* instead of a copy.
+
+```{julia}
+@show A[1]
+E = @view A[1:5, 1:5]
+E[1] = 2.0
+@show A[1]
+```
+
+However, this means that `@view A[1:5, 1:5]` did not allocate an array (it does
+allocate a pointer if the escape analysis is unable to prove that it can be
+elided. This means that in small loops there will be no allocation, while if
+the view is returned from a function for example it will allocate the pointer,
+~80 bytes, but not the memory of the array. This means that it is O(1) in cost
+but with a relatively small constant).
+
+### Asymptotic Cost of Heap Allocations
+
+Heap allocations have to locate and prepare a space in RAM that is proportional
+to the amount of memory that is calculated, which means that the cost of a heap
+allocation for an array is O(n), with a large constant. As RAM begins to fill
+up, this cost dramatically increases. If you run out of RAM, your computer
+may begin to use *swap*, which is essentially RAM simulated on your hard drive.
+Generally when you hit swap your performance is so dead that you may think that
+your computation froze, but if you check your resource use you will notice that
+it's actually just filled the RAM and starting to use the swap.
+
+But think of it as O(n) with a large constant factor. This means that for
+operations which only touch the data once, heap allocations can dominate the
+computational cost:
+
+```{julia}
+using LinearAlgebra, BenchmarkTools
+function alloc_timer(n)
+    A = rand(n, n)
+    B = rand(n, n)
+    C = rand(n, n)
+    t1 = @belapsed $A .* $B
+    t2 = @belapsed ($C .= $A .* $B)
+    t1, t2
+end
+ns = 2 .^ (2:11)
+res = [alloc_timer(n) for n in ns]
+alloc   = [x[1] for x in res]
+noalloc = [x[2] for x in res]
+
+using Plots
+plot(ns, alloc;
+     label = "=",
+     xscale = :log10,
+     yscale = :log10,
+     legend = :bottomright,
+     title = "Micro-optimizations matter for BLAS1")
+plot!(ns, noalloc; label = ".=")
+```
+
+However, when the computation takes O(n^3), like in matrix multiplications,
+the high constant factor only comes into play when the matrices are sufficiently
+small:
+
+```{julia}
+using LinearAlgebra, BenchmarkTools
+function alloc_timer(n)
+    A = rand(n, n)
+    B = rand(n, n)
+    C = rand(n, n)
+    t1 = @belapsed $A*$B
+    t2 = @belapsed mul!($C,$A,$B)
+    t1,t2
+end
+ns = 2 .^ (2:7)
+res = [alloc_timer(n) for n in ns]
+alloc   = [x[1] for x in res]
+noalloc = [x[2] for x in res]
+
+using Plots
+plot(ns, alloc;
+     label = "*",
+     xscale = :log10,
+     yscale = :log10,
+     legend = :bottomright,
+     title = "Micro-optimizations only matter for small matmuls")
+plot!(ns, noalloc; label = "mul!")
+```
+
+Though using a mutating form is never bad and always is a little bit better.
+
+### Optimizing Memory Use Summary
+
+- Avoid cache misses by reusing values
+- Iterate along columns
+- Avoid heap allocations in inner loops
+- Heap allocations occur when the size of things is not proven at compile-time
+- Use fused broadcasts (with mutated outputs) to avoid heap allocations
+- Array vectorization confers no special benefit in Julia because Julia loops
+  are as fast as C or Fortran
+- Use views instead of slices when applicable
+- Avoiding heap allocations is most necessary for O(n) algorithms or algorithms
+  with small arrays
+- Use StaticArrays.jl to avoid heap allocations of small arrays in inner loops
+
+## Julia's Type Inference and the Compiler
+
+Many people think Julia is fast because it is JIT compiled. That is simply not
+true (we've already shown examples where Julia code isn't fast, but it's always
+JIT compiled!). Instead, the reason why Julia is fast is because the combination
+of two ideas:
+
+- Type inference
+- Type specialization in functions
+
+These two features naturally give rise to Julia's core design feature: multiple
+dispatch. Let's break down these pieces.
+
+### Type Inference
+
+At the core level of the computer, everything has a type. Some languages are
+more explicit about said types, while others try to hide the types from the
+user. A type tells the compiler how to to store and interpret the memory of a
+value. For example, if the compiled code knows that the value in the register
+is supposed to be interpreted as a 64-bit floating point number, then it
+understands that slab of memory like:
+
+![](https://i.stack.imgur.com/ZUbLc.png)
+
+Importantly, it will know what to do for function calls. If the code tells it
+to add two floating point numbers, it will send them as inputs to the
+Floating Point Unit (FPU) which will give the output.
+
+If the types are not known, then... ? So one cannot actually compute until
+the types are known, since otherwise it's impossible to interpret the memory.
+In languages like C, the programmer has to declare the types of
+variables in the program:
+
+```
+void add(double *a, double *b, double *c, size_t n){
+  size_t i;
+  for(i = 0; i < n; ++i) {
+    c[i] = a[i] + b[i];
+  }
+}
+```
+
+The types are known at compile time because the programmer set it in stone.
+In many interpreted languages Python, types are checked at runtime. For example,
+
+```
+a = 2
+b = 4
+a + b
+```
+
+when the addition occurs, the Python interpreter will check the object holding
+the values and ask it for its types, and use those types to know how to compute
+the + function. For this reason, the add function in Python is rather complex
+since it needs to decode and have a version for all primitive types!
+
+Not only is there runtime overhead checks in function calls due to to not being
+explicit about types, there is also a memory overhead since it is impossible
+to know how much memory a value with take since that's a property of its type.
+Thus the Python interpreter cannot statically guarantee exact unchanging values
+for the size that a value would take in the stack, meaning that the variables
+are not stack-allocated. This means that every number ends up heap-allocated,
+which hopefully begins to explain why this is not as fast as C.
+
+The solution is Julia is somewhat of a hybrid. The Julia code looks like:
+
+```{julia}
+a = 2
+b = 4
+a + b
+```
+
+However, before JIT compilation, Julia runs a type inference algorithm which
+finds out that `A` is an `Int`, and `B` is an `Int`. You can then understand
+that if it can prove that `A + B` is an `Int`, then it can propagate all of the
+types through.
+
+### Type Specialization in Functions
+
+Julia is able to propagate type inference through functions because, even if
+a function is "untyped", Julia will interpret this as a *generic function*
+over possible *methods*, where every method has a concrete type. This means that
+in Julia, the function:
+
+```{julia}
+f(x, y) = x + y
+```
+
+is not what you may think of as a "single function", since given inputs of
+different types it will actually be a different function. We can see this by
+examining the *LLVM IR* (LLVM is Julia's compiler, the IR is the
+*Intermediate Representation*, i.e. a platform-independent representation
+of assembly that lives in LLVM that it knows how to convert into assembly per
+architecture):
+
+```{julia}
+using InteractiveUtils
+@code_llvm f(2, 5)
+```
+
+```{julia}
+@code_llvm f(2.0, 5.0)
+```
+
+Notice that when `f` is the function that takes in two `Int`s, `Int`s add to
+give an `Int` and thus `f` outputs an `Int`. When `f` is the function that
+takes two `Float64`s, `f` returns a `Float64`. Thus in the code:
+
+```{julia}
+function g(x, y)
+  a = 4
+  b = 2
+  c = f(x, a)
+  d = f(b, c)
+  f(d, y)
+end
+
+@code_llvm g(2, 5)
+```
+
+`g` on two `Int` inputs is a function that has `Int`s at every step along the
+way and spits out an `Int`. We can use the `@code_warntype` macro to better
+see the inference along the steps of the function:
+
+```{julia}
+@code_warntype g(2, 5)
+```
+
+What happens on mixtures?
+
+```{julia}
+@code_llvm f(2.0, 5)
+```
+
+When we add an `Int` to a `Float64`, we promote the `Int` to a `Float64` and then
+perform the `+` between two `Float64`s. When we go to the full function, we
+see that it can still infer:
+
+```{julia}
+@code_warntype g(2.0, 5)
+```
+
+and it uses this to build a very efficient assembly code because it knows exactly
+what the types will be at every step:
+
+```{julia}
+@code_llvm g(2.0, 5)
+```
+
+(notice how it handles the constant *literals* 4 and 2: it converted them at
+compile time to reduce the algorithm to 3 floating point additions).
+
+### Type Stability
+
+Why is the inference algorithm able to infer all of the types of `g`? It's
+because it knows the types coming out of `f` at compile time. Given an `Int`
+and a `Float64`, `f` will always output a `Float64`, and thus it can continue
+with inference knowing that `c`, `d`, and eventually the output is `Float64`.
+Thus in order for this to occur, we need that the type of the output on our
+function is directly inferred from the type of the input. This property is
+known as type-stability.
+
+An example of breaking it is as follows:
+
+```{julia}
+function h(x, y)
+  out = x + y
+  rand() < 0.5 ? out : Float64(out)
+end
+```
+
+Here, on an integer input the output's type is randomly either Int or Float64,
+and thus the output is unknown:
+
+```{julia}
+@code_warntype h(2, 5)
+```
+
+This means that its output type is `Union{Int,Float64}` (Julia uses union types
+to keep the types still somewhat constrained). Once there are multiple choices,
+those need to get propagated through the compiler, and all subsequent calculations
+are the result of either being an `Int` or a `Float64`.
+
+(Note that Julia has small union optimizations, so if this union is of size
+4 or less then Julia will still be able to optimize it quite a bit.)
+
+### Multiple Dispatch
+
+The `+` function on numbers was implemented in Julia, so how were these rules all
+written down? The answer is multiple dispatch. In Julia, you can tell a function
+how to act differently on different types by using type assertions on the
+input values. For example, let's make a function that computes `2x + y` on `Int`
+and `x/y` on `Float64`:
+
+```{julia}
+ff(x::Int, y::Int) = 2x + y
+ff(x::Float64, y::Float64) = x / y
+@show ff(2, 5)
+@show ff(2.0, 5.0)
+```
+
+The `+` function in Julia is just defined as `+(a, b)`, and we can actually
+point to that code in the Julia distribution:
+
+```{julia}
+@which +(2.0, 5)
+```
+
+To control at a higher level, Julia uses *abstract types*. For example,
+`Float64 <: AbstractFloat`, meaning `Float64`s are a subtype of `AbstractFloat`.
+We also have that `Int <: Integer`, while both `AbstractFloat <: Number` and
+`Integer <: Number`.
+
+![](https://upload.wikimedia.org/wikipedia/commons/thumb/4/40/Type-hierarchy-for-julia-numbers.png/800px-Type-hierarchy-for-julia-numbers.png)
+
+Julia allows the user to define dispatches at a higher level, and the version
+that is called is the most strict version that is correct. For example, right
+now with `ff` we will get a `MethodError` if we call it between a `Int` and a
+`Float64` because no such method exists:
+
+```{julia}
+#| error: true
+ff(2.0, 5)
+```
+
+However, we can add a *fallback method* to the function `ff` for two numbers:
+
+```{julia}
+#| error: true
+ff(x::Number, y::Number) = x + y
+ff(2.0, 5)
+```
+
+Notice that the fallback method still specializes on the inputs:
+
+```{julia}
+@code_llvm ff(2.0, 5)
+```
+
+It's essentially just a template for what functions to possibly try and create
+given the types that are seen. When it sees `Float64` and `Int`, it knows it
+should try and create the function that does `x+y`, and once it knows it's
+`Float64` plus a `Int`, it knows it should create the function that converts the
+`Int` to a `Float64` and then does addition between two `Float64`s, and that
+is precisely the generated LLVM IR on this pair of input types.
+
+And that's essentially Julia's secret sauce: since it's always specializing its
+types on each function, if those functions themselves can infer the output, then
+the entire function can be inferred and generate optimal code, which is then
+optimized by the compiler and out comes an efficient function. If types can't
+be inferred, Julia falls back to a slower "Python" mode (though with
+optimizations in cases like small unions). Users then get control over this
+specialization process through multiple dispatch, which is then Julia's
+core feature since it allows adding new options without any runtime cost.
+
+### Any Fallbacks
+
+Note that `f(x, y) = x + y` is equivalent to `f(x::Any, y::Any) = x + y`, where `Any`
+is the maximal supertype of every Julia type. Thus `f(x, y) = x + y` is essentially
+a fallback for all possible input values, telling it what to do in the case that
+no other dispatches exist. However, note that this dispatch itself is not slow,
+since it will be specialized on the input types.
+
+### Ambiguities
+
+The version that is called is the most strict version that is correct. What
+happens if it's impossible to define "the most strict version"? For example,
+
+```{julia}
+ff(x::Float64, y::Number) = 5x + 2y
+ff(x::Number, y::Int) = x - y
+```
+
+What should it call on `f(2.0, 5)` now?  `ff(x::Float64, y::Number)` and
+`ff(x::Number, y::Int)` are both more strict than `ff(x::Number, y::Number)`,
+so one of them should be called, but neither are more strict than each other,
+and thus you will end up with an ambiguity error:
+
+```{julia}
+#| error: true
+ff(2.0, 5)
+```
+
+### Untyped Containers
+
+One way to ruin inference is to use an untyped container. For example, the
+array constructors use type inference themselves to know what their container
+type will be. Therefore,
+
+```{julia}
+a = [1.0, 2.0, 3.0]
+```
+
+uses type inference on its inputs to know that it should be something that holds
+`Float64` values, and thus it is a 1-dimensional array of `Float64` values, or
+`Array{Float64, 1}`. The accesses:
+
+```{julia}
+a[1]
+```
+
+are then inferred, since this is just the function `getindex(a::Array{T}, i) where T`
+which is a function that will produce something of type `T`, the element type of
+the array. However, if we tell Julia to make an array with element type `Any`:
+
+```{julia}
+b = ["1.0", 2, 2.0]
+```
+
+(here, Julia falls back to `Any` because it cannot promote the values to the same
+type), then the best inference can do on the output is to say it could have
+any type:
+
+```{julia}
+function bad_container(a)
+  a[2]
+end
+@code_warntype bad_container(a)
+```
+
+```{julia}
+@code_warntype bad_container(b)
+```
+
+This is one common way that type inference can breakdown. For example, even if
+the array is all numbers, we can still break inference:
+
+```{julia}
+x = Number[1.0, 3]
+function q(x)
+  a = 4
+  b = 2
+  c = f(x[1], a)
+  d = f(b, c)
+  f(d, x[2])
+end
+@code_warntype q(x)
+```
+
+Here the type inference algorithm quickly gives up and infers to `Any`, losing
+all specialization and automatically switching to Python-style runtime type
+checking.
+
+### Type definitions
+
+### Value types and isbits
+
+In Julia, types which can fully inferred and which are composed of primitive
+or `isbits` types are value types. This means that, inside of an array, their
+values are the values of the type itself, and not a pointer to the values.
+
+You can check if the type is a value type through `isbits`:
+
+```{julia}
+isbits(1.0)
+```
+
+Note that a Julia `struct` which holds i`sbits` values is `isbits` as well,
+if it's fully inferred:
+
+```{julia}
+struct MyComplex
+  real::Float64
+  imag::Float64
+end
+isbits(MyComplex(1.0, 1.0))
+```
+
+We can see that the compiler knows how to use this efficiently since it knows
+that what comes out is always `Float64`:
+
+```{julia}
+Base.:+(a::MyComplex, b::MyComplex) = MyComplex(a.real + b.real, a.imag + b.imag)
+Base.:+(a::MyComplex, b::Int) = MyComplex(a.real + b, a.imag)
+Base.:+(b::Int, a::MyComplex) = MyComplex(a.real + b, a.imag)
+g(MyComplex(1.0, 1.0),MyComplex(1.0, 1.0))
+```
+
+```{julia}
+@code_warntype g(MyComplex(1.0, 1.0),MyComplex(1.0, 1.0))
+```
+
+```{julia}
+@code_llvm g(MyComplex(1.0, 1.0),MyComplex(1.0, 1.0))
+```
+
+Note that the compiled code simply works directly on the `double` pieces.
+We can also make this be concrete without pre-specifying that the values always
+have to be `Float64` by using a type parameter.
+
+```{julia}
+struct MyParameterizedComplex{T}
+  real::T
+  imag::T
+end
+isbits(MyParameterizedComplex(1.0, 1.0))
+```
+
+Note that `MyParameterizedComplex{T}` is a concrete type for every `T`: it is a
+shorthand form for defining a whole family of types.
+
+```{julia}
+Base.:+(a::MyParameterizedComplex, b::MyParameterizedComplex) = MyParameterizedComplex(a.real + b.real, a.imag + b.imag)
+Base.:+(a::MyParameterizedComplex, b::Int) = MyParameterizedComplex(a.real + b, a.imag)
+Base.:+(b::Int, a::MyParameterizedComplex) = MyParameterizedComplex(a.real + b, a.imag)
+g(MyParameterizedComplex(1.0, 1.0), MyParameterizedComplex(1.0, 1.0))
+```
+
+```{julia}
+@code_warntype g(MyParameterizedComplex(1.0, 1.0), MyParameterizedComplex(1.0, 1.0))
+```
+
+See that this code also automatically works and compiles efficiently for
+`Float32` as well:
+
+```{julia}
+@code_warntype g(MyParameterizedComplex(1.0f0, 1.0f0), MyParameterizedComplex(1.0f0, 1.0f0))
+```
+
+```{julia}
+@code_llvm g(MyParameterizedComplex(1.0f0, 1.0f0), MyParameterizedComplex(1.0f0, 1.0f0))
+```
+
+It is important to know that if there is any piece of a type which doesn't
+contain type information, then it cannot be isbits because then it would have
+to be compiled in such a way that the size is not known in advance. For example:
+
+```{julia}
+struct MySlowComplex
+  real
+  imag
+end
+isbits(MySlowComplex(1.0, 1.0))
+```
+
+```{julia}
+Base.:+(a::MySlowComplex, b::MySlowComplex) = MySlowComplex(a.real + b.real, a.imag + b.imag)
+Base.:+(a::MySlowComplex, b::Int) = MySlowComplex(a.real + b, a.imag)
+Base.:+(b::Int, a::MySlowComplex) = MySlowComplex(a.real + b, a.imag)
+g(MySlowComplex(1.0, 1.0), MySlowComplex(1.0, 1.0))
+```
+
+```{julia}
+@code_warntype g(MySlowComplex(1.0, 1.0), MySlowComplex(1.0, 1.0))
+```
+
+```{julia}
+@code_llvm g(MySlowComplex(1.0, 1.0), MySlowComplex(1.0, 1.0))
+```
+
+```{julia}
+struct MySlowComplex2
+  real::AbstractFloat
+  imag::AbstractFloat
+end
+isbits(MySlowComplex2(1.0,  1.0))
+```
+
+```{julia}
+Base.:+(a::MySlowComplex2, b::MySlowComplex2) = MySlowComplex2(a.real + b.real, a.imag + b.imag)
+Base.:+(a::MySlowComplex2, b::Int) = MySlowComplex2(a.real + b, a.imag)
+Base.:+(b::Int, a::MySlowComplex2) = MySlowComplex2(a.real + b, a.imag)
+g(MySlowComplex2(1.0, 1.0), MySlowComplex2(1.0, 1.0))
+```
+
+Here's the timings:
+
+```{julia}
+a = MyComplex(1.0, 1.0)
+b = MyComplex(2.0, 1.0)
+@btime g(a, b)
+```
+
+```{julia}
+a = MyParameterizedComplex(1.0, 1.0)
+b = MyParameterizedComplex(2.0, 1.0)
+@btime g(a, b)
+```
+
+```{julia}
+a = MySlowComplex(1.0, 1.0)
+b = MySlowComplex(2.0, 1.0)
+@btime g(a, b)
+```
+
+```{julia}
+a = MySlowComplex2(1.0, 1.0)
+b = MySlowComplex2(2.0, 1.0)
+@btime g(a, b)
+```
+
+### Note on Julia
+
+Note that, because of these type specialization, value types, etc. properties,
+the number types, even ones such as `Int`, `Float64`, and `Complex`, are all
+themselves implemented in pure Julia! Thus even basic pieces can be implemented
+in Julia with full performance, given one uses the features correctly.
+
+### Note on isbits
+
+Note that a type which is `mutable struct` will not be isbits. This means that
+mutable structs will be a pointer to a heap allocated object, unless it's
+shortlived and the compiler can erase its construction. Also, note that
+`isbits` compiles down to bit operations from pure Julia, which means that these
+types can directly compile to GPU kernels through CUDAnative without modification.
+
+### Function Barriers
+
+Since functions automatically specialize on their input types in Julia, we can
+use this to our advantage in order to make an inner loop fully inferred. For
+example, take the code from above but with a loop:
+
+```{julia}
+function r(x)
+  a = 4
+  b = 2
+  for i in 1:100
+    c = f(x[1], a)
+    d = f(b, c)
+    a = f(d, x[2])
+  end
+  a
+end
+@btime r(x)
+```
+
+In here, the loop variables are not inferred and thus this is really slow.
+However, we can force a function call in the middle to end up with specialization
+and in the inner loop be stable:
+
+```{julia}
+s(x) = _s(x[1], x[2])
+function _s(x1, x2)
+  a = 4
+  b = 2
+  for i in 1:100
+    c = f(x1, a)
+    d = f(b, c)
+    a = f(d, x2)
+  end
+  a
+end
+@btime s(x)
+```
+
+Notice that this algorithm still doesn't infer:
+
+```{julia}
+@code_warntype s(x)
+```
+
+since the output of `_s` isn't inferred, but while it's in `_s` it will have
+specialized on the fact that `x[1]` is a `Float64` while `x[2]` is a `Int`,
+making that inner loop fast. In fact, it will only need to pay one *dynamic dispatch*,
+i.e. a multiple dispatch determination that happens at runtime. Notice that
+whenever functions are inferred, the dispatching is static since the choice
+of the dispatch is already made and compiled into the LLVM IR.
+
+### Specialization at Compile Time
+
+Julia code will specialize at compile time if it can prove something about the
+result. For example:
+
+```{julia}
+function fff(x)
+  if x isa Int
+    y = 2
+  else
+    y = 4.0
+  end
+  x + y
+end
+```
+
+You might think this function has a branch, but in reality Julia can determine
+whether `x` is an `Int` or not at compile time, so it will actually compile it
+away and just turn it into the function `x + 2` or `x + 4.0`:
+
+```{julia}
+@code_llvm fff(5)
+```
+
+```{julia}
+@code_llvm fff(2.0)
+```
+
+Thus one does not need to worry about over-optimizing since in the obvious
+cases the compiler will actually remove all of the extra pieces when it can!
+
+### Global Scope and Optimizations
+
+This discussion shows how Julia's optimizations all apply during function
+specialization times. Thus calling Julia functions is fast. But what about
+when doing something outside of the function, like directly in a module or in
+the REPL?
+
+```{julia}
+@btime for j in 1:100, i in 1:100
+  global A, B, C
+  C[i, j] = A[i, j] + B[i, j]
+end
+```
+
+This is very slow because the types of `A`, `B`, and `C` cannot be inferred.
+Why can't they be inferred? Well, at any time in the dynamic REPL scope I can
+do something like `C = "haha now a string!"`, and thus it cannot specialize on
+the types currently existing in the REPL (since asynchronous changes could also
+occur), and therefore it defaults back to doing a type check at every single
+function which slows it down. Moral of the story, Julia functions are fast
+but its global scope is too dynamic to be optimized.
+
+### Summary
+
+- Julia is not fast because of its JIT, it's fast because of function specialization
+  and type inference
+- Type stable functions allow inference to fully occur
+- Multiple dispatch works within the function specialization mechanism to create
+  overhead-free compile time controls
+- Julia will specialize the generic functions
+- Making sure values are concretely typed in inner loops is essential for performance
+
+## Overheads of Individual Operations
+
+Now let's dig even a little deeper. Everything the processor does has a cost.
+A great chart to keep in mind is
+[this classic one](http://ithare.com/infographics-operation-costs-in-cpu-clock-cycles/).
+A few things should immediately jump out to you:
+
+- Simple arithmetic, like floating point additions, are super cheap. ~1 clock
+  cycle, or a few nanoseconds.
+- Processors do *branch prediction* on `if` statements. If the code goes down
+  the predicted route, the `if` statement costs ~1-2 clock cycles. If it goes
+  down the wrong route, then it will take ~10-20 clock cycles. This means that
+  predictable branches, like ones with clear patterns or usually the same
+  output, are much cheaper (almost free) than unpredictable branches.
+- Function calls are expensive: 15-60 clock cycles!
+- RAM reads are very expensive, with lower caches less expensive.
+
+### Bounds Checking
+
+Let's check the LLVM IR on one of our earlier loops:
+
+```{julia}
+function inner_noalloc!(C, A, B)
+  for j in 1:100, i in 1:100
+    val = A[i, j] + B[i, j]
+    C[i, j] = val[1]
+  end
+end
+@code_llvm inner_noalloc!(C, A, B)
+```
+
+Notice that this `getelementptr inbounds` stuff is bounds checking. Julia, like
+all other high level languages, enables bounds checking by default in order to
+not allow the user to index outside of an array. Indexing outside of an array
+is dangerous: it can quite easily segfault your system if you change some memory
+that is unknown beyond your actual array. Thus Julia throws an error:
+
+```{julia}
+#| error: true
+A[101, 1]
+```
+
+In tight inner loops, we can remove this bounds checking process using the
+`@inbounds` macro:
+
+```{julia}
+function inner_noalloc_ib!(C, A, B)
+  @inbounds for j in 1:100, i in 1:100
+    val = A[i, j] + B[i, j]
+    C[i, j] = val[1]
+  end
+end
+@btime inner_noalloc!(C, A, B)
+```
+
+```{julia}
+@btime inner_noalloc_ib!(C, A, B)
+```
+
+### SIMD
+
+Now let's inspect the LLVM IR again:
+
+```{julia}
+@code_llvm inner_noalloc_ib!(C, A, B)
+```
+
+If you look closely, you will see things like:
+
+```
+%wide.load24 = load <4 x double>, <4 x double> addrspac(13)* %46, align 8
+; └
+; ┌ @ float.jl:395 within `+'
+%47 = fadd <4 x double> %wide.load, %wide.load24
+```
+
+What this is saying is that it's loading and adding 4 `Float64`s at a time!
+This feature of the processor is known as SIMD: single input multiple data.
+If certain primitive floating point operations, like `+` and `*`, are done
+in succession (i.e. no inbounds checks between them!), then the processor
+can lump them together and do multiples at once. Since clock cycles have stopped
+improving while transistors have gotten smaller, this "lumping" has been a big
+source of speedups in computational mathematics even though the actual `+` and `*`
+hasn't gotten faster. Thus to get full speed we want to make sure this is utilized
+whenever possible, which essentially just amounts to doing type inferred loops
+with no branches or bounds checks in the way.
+
+### FMA
+
+Modern processors have a single operation that fuses the multiplication and
+the addition in the operation `x*y+z`, known as a *fused multiply-add* or
+FMA. Note that FMA has less floating point roundoff error than the two operation
+form. We can see this intrinsic in the resulting LLVM IR:
+
+```{julia}
+@code_llvm fma(2.0, 5.0, 3.0)
+```
+
+The Julia function `muladd` will automatically choose between FMA and the original
+form depending on the availability of the routine in the processor. The MuladdMacro.jl
+package has a macro `@muladd` which pulls apart statements to add `muladd`
+expressions. For example, `x1 * y1 + x2 * y2 + x3 * y3` can be rewritten as:
+
+```
+muladd(x1, y1, muladd(x2, y2, x3 * y3))
+```
+
+Which reduces the linear combination to just 3 arithmetic operations. FMA
+operations can be SIMD'd.
+
+### Inlining
+
+All of this would go to waste if function call costs of 50 clock cycles were
+interrupting every single `+`. Fortunately these function calls disappear during
+the compilation process due to what's known as inlining. Essentially, if the
+function call is determined to be "cheap enough", the actual function call
+is removed and the code is basically pasted into the function caller. We can
+force a function call to occur by teling it to not inline:
+
+```{julia}
+@noinline fnoinline(x, y) = x + y
+finline(x, y) = x + y # Can add @inline, but this is automatic here
+function qinline(x, y)
+  a = 4
+  b = 2
+  c = finline(x, a)
+  d = finline(b, c)
+  finline(d, y)
+end
+function qnoinline(x, y)
+  a = 4
+  b = 2
+  c = fnoinline(x, a)
+  d = fnoinline(b, c)
+  fnoinline(d, y)
+end
+```
+
+```{julia}
+@code_llvm qinline(1.0, 2.0)
+```
+
+```{julia}
+@code_llvm qnoinline(1.0, 2.0)
+```
+
+We can see now that it keeps the function calls:
+
+```
+%4 = call double @julia_fnoinline_21538(double %3, double %1)
+```
+
+and this is slower in comparison to what we had before (but it still infers).
+
+```{julia}
+x = 1.0
+y = 2.0
+@btime qinline(x, y)
+```
+
+```{julia}
+@btime qnoinline(x, y)
+```
+
+Note that if we ever want to go the other direction and tell Julia to inline as
+much as possible, one can use the macro `@inline`.
+
+### Summary
+
+- Scalar operations are super cheap, and if they are cache-aligned then more
+  than one will occur in a clock cycle.
+- Inlining a function will remove the high function call overhead.
+- Branch prediction is pretty good these days, so keep them out of super tight
+  inner loops but don't worry all too much about them.
+- Cache misses are quite expensive the further out it goes.
+
+## Note on Benchmarking
+
+Julia's compiler is smart. This means that if you don't try hard enough, Julia's
+compiler might get rid of your issues. For example, it can delete branches and
+directly compute the result if all of the values are known at compile time. So
+be very careful when benchmarking: your tests may have just compiled away!
+
+Notice the following:
+
+```{julia}
+@btime qinline(1.0, 2.0)
+```
+
+Dang, that's much faster! But if you look into it, Julia's compiler is actually
+"cheating" on this benchmark:
+
+```{julia}
+cheat() = qinline(1.0, 2.0)
+@code_llvm cheat()
+```
+
+It realized that `1.0` and `2.0` are constants, so it did what's known as
+*constant propagation*, and then used those constants inside of the function.
+It realized that the solution is always `9`, so it compiled the function that...
+spits out `9`! So it's fast because it's not computing anything. So be very
+careful about propagation of constants and literals. In general this is a very
+helpful feature, but when benchmarking this can cause some weird behavior. If
+a micro benchmark is taking less than a nanosecond, check and see if the compiler
+"fixed" your code!
+
+## Conclusion
+
+Optimize your serial code before you parallelize. There's a lot to think about.
+
+# Discussion Questions
+
+Here's a few discussion questions to think about performance engineering in
+scientific tasks:
+
+1. What are the advantages of a `Vector{Array}` vs a `Matrix`? What are the
+   disadvantage? (What's different?)
+2. What is a good way to implement a data frame?
+3. What are some good things that come out of generic functions for free?
+   What are some things you should watch out for with generic functions?
diff --git a/references.bib b/references.bib
new file mode 100644
index 0000000..0220dbd
--- /dev/null
+++ b/references.bib
@@ -0,0 +1,19 @@
+@article{knuth84,
+  author = {Knuth, Donald E.},
+  title = {Literate Programming},
+  year = {1984},
+  issue_date = {May 1984},
+  publisher = {Oxford University Press, Inc.},
+  address = {USA},
+  volume = {27},
+  number = {2},
+  issn = {0010-4620},
+  url = {https://doi.org/10.1093/comjnl/27.2.97},
+  doi = {10.1093/comjnl/27.2.97},
+  journal = {Comput. J.},
+  month = may,
+  pages = {97–111},
+  numpages = {15}
+}
+
+
diff --git a/references.qmd b/references.qmd
new file mode 100644
index 0000000..925f7c4
--- /dev/null
+++ b/references.qmd
@@ -0,0 +1,4 @@
+# References {.unnumbered}
+
+::: {#refs}
+:::
diff --git a/summary.qmd b/summary.qmd
new file mode 100644
index 0000000..b450ab7
--- /dev/null
+++ b/summary.qmd
@@ -0,0 +1,3 @@
+# Summary
+
+In summary, this book has no content whatsoever.
diff --git a/test.qmd b/test.qmd
new file mode 100644
index 0000000..4325a04
--- /dev/null
+++ b/test.qmd
@@ -0,0 +1,14 @@
+# Test Inserting Code
+
+Can we insert code from another file?
+
+{{< include code/test.qmd >}}
+
+Yes we can!
+
+::: {.callout-tip}
+A couple of important things to remember when using computational includes:
+
+1. All computations still share a single engine (e.g. knitr or jupyter)
+1. Computational includes work only in `.qmd` files (they don’t work in `.ipynb` notebook files)
+:::
\ No newline at end of file
-- 
2.33.1.windows.1

